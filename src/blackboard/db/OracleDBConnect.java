package blackboard.db;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import javax.xml.parsers.DocumentBuilder;

import blackboard.util.BannerStudentInfo;
import blackboard.util.Course;
import blackboard.util.DateFormatter;
import blackboard.util.Dropped;
import blackboard.util.DteFormatter;
import blackboard.util.MessageLogger;
import blackboard.util.MoodleObjects;
import blackboard.util.SpecialCharacters;
import blackboard.util.StudentEnrol;
import blackboard.util.UserEnrol;
import blackboard.util.XMLBuilder;
import moodle.automate.course.ExcelCourse;
import moodle.automate.course.Resits;
import moodle.automate.enrol.CourseRole;
import moodle.automate.enrol.ExcelEnrol;
import moodle.automate.enrol.UIBEnrol;
import moodle.uib.automate.StudentCourseDrops;

public class OracleDBConnect {

	protected Connection conn;
	protected Connection conn1;
	protected ArrayList list;
	protected String effTerm;
	private SpecialCharsDb exportDb = null;
	private ArrayList charList = null;
	private HashMap hmap;
	private String crseCode;
	private String crseNumb;
	private String seqNumb;
	private boolean upload;
	private int TERM;
	private int SUBJ;
	private int CRSE;
	private int ID;
	private int SEQNO;
	private int CRN;
	private int PRIMARY_IND;
	private int hdrCnt,tempCnt;
	
	private boolean idFlag = false;
    private String action;
    
	public void setAction(String action) {
		this.action = action;
	}

	
	public OracleDBConnect() {

		try {
			
		//jdbc:oracle:thin:@localhost:5500/globldb3
			Class.forName("oracle.jdbc.driver.OracleDriver");
			String url = "jdbc:oracle:thin:@bandb-prod.ec.cavehill.uwi.edu:8000:PROD";
//			String url = "jdbc:oracle:thin:@bandb-dev.ec.cavehill.uwi.edu:8003:TEST";
//			String url = "jdbc:oracle:thin:@hermes.cavehill.uwi.edu:1521:PRODCH";
			conn = DriverManager.getConnection(url, "svc_update", "e98ce36209");
//			conn = DriverManager.getConnection(url, "svc_ethink", "z38te47209");
			
			conn.setAutoCommit(true);
			
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException ex) {
			ex.printStackTrace();

		}
	}
   public void connectPostgres() throws SQLException {
	   String url = "jdbc:postgresql://localhost:5432/upathlearners?user=postgres&password=kentish&ssl=false";
	   Connection conn = DriverManager.getConnection(url);
   }
	private void setIdFlag(boolean f) {
		idFlag = f;
	}

	private boolean getIdFlag() {
		return idFlag;
	}

	public void setCrseCode(String s) {
		this.crseCode = s;
	}

	public void setCrseNumb(String s) {
		this.crseNumb = s;
	}

	public void setUpload(boolean s) {
		this.upload = s;
	}

	public void setSeqNumb(String s) {
		this.seqNumb = s;

	}

	public void setMoodleObjects(HashMap hmap) {
		this.hmap = hmap;
	}

	protected String lPad(String MyValue, String MyPadCharacter,
			int MyPaddedLength) {
		String padString = "";
		int padLength = 0;

		padLength = MyPaddedLength - MyValue.length();
		for (int i = 0; i < padLength; i++) {
			padString = padString + MyPadCharacter;
		}
		padString = padString + MyValue;

		return padString;
	}

	public void setEffectiveTerm(String effTerm) {
		this.effTerm = effTerm;
	}

	public void gatherStudentsOnHold() {

		int cnt = 0;

		String sqlstmt = "SELECT SPRIDEN.SPRIDEN_ID, SPRIDEN.SPRIDEN_LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SGBSTDN.SGBSTDN_STST_CODE, SPRHOLD.SPRHOLD_HLDD_CODE, SGBSTDN.SGBSTDN_CAMP_CODE, "
				+ "SGBSTDN.SGBSTDN_COLL_CODE_1, SGBSTDN.SGBSTDN_SITE_CODE, SGBSTDN.SGBSTDN_LEVL_CODE, "
				+ "SPBPERS.SPBPERS_BIRTH_DATE, SGBSTDN.SGBSTDN_LEVL_CODE FROM SPBPERS INNER JOIN (SPRIDEN INNER JOIN "
				+ "(SPRHOLD INNER JOIN SGBSTDN ON SPRHOLD.SPRHOLD_PIDM = SGBSTDN.SGBSTDN_PIDM) ON "
				+ "SPRIDEN.SPRIDEN_PIDM = SGBSTDN.SGBSTDN_PIDM) ON SPBPERS.SPBPERS_PIDM = SPRIDEN.SPRIDEN_PIDM "
				+ "WHERE (((SPRHOLD.SPRHOLD_HLDD_CODE)=?) AND ((SPRHOLD.SPRHOLD_TO_DATE)>=?) AND "
				+ "((SGBSTDN.SGBSTDN_TERM_CODE_EFF)=?) AND ((SPRIDEN.SPRIDEN_CHANGE_IND) Is Null))";

		DateFormatter df = new DateFormatter();

		
		try {
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setString(1, "BU");
			prepStmt.setDate(2, java.sql.Date.valueOf(df.getSimpleDate()));
			prepStmt.setString(3, getCurrentTerm());

			ResultSet rs = prepStmt.executeQuery();
			MySQLConnection mysql = new MySQLConnection();
			while (rs.next()) {
				cnt++;
				System.out.println(cnt);

				mysql.addStudentsOnHold(rs.getString(1), rs.getString(2),
						rs.getString(3), rs.getDate(10),
						getLevel(rs.getString(11)));
			}
			mysql.closeConnection();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public boolean studentOnHold(String id) {

		boolean found = false;

		String sqlstmt = "SELECT SPRIDEN.SPRIDEN_ID, SPRIDEN.SPRIDEN_LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SGBSTDN.SGBSTDN_STST_CODE, SPRHOLD.SPRHOLD_HLDD_CODE, SGBSTDN.SGBSTDN_CAMP_CODE, "
				+ "SGBSTDN.SGBSTDN_COLL_CODE_1, SGBSTDN.SGBSTDN_SITE_CODE, SGBSTDN.SGBSTDN_LEVL_CODE, "
				+ "SPBPERS.SPBPERS_BIRTH_DATE, SGBSTDN.SGBSTDN_LEVL_CODE FROM SPBPERS INNER JOIN (SPRIDEN INNER JOIN "
				+ "(SPRHOLD INNER JOIN SGBSTDN ON SPRHOLD.SPRHOLD_PIDM = SGBSTDN.SGBSTDN_PIDM) ON "
				+ "SPRIDEN.SPRIDEN_PIDM = SGBSTDN.SGBSTDN_PIDM) ON SPBPERS.SPBPERS_PIDM = SPRIDEN.SPRIDEN_PIDM "
				+ "WHERE (((SPRHOLD.SPRHOLD_HLDD_CODE)=?) AND ((SPRHOLD.SPRHOLD_TO_DATE)>=?) AND "
				+ "((SGBSTDN.SGBSTDN_TERM_CODE_EFF)=?) AND ((SPRIDEN.SPRIDEN_ID = ?) AND ((SPRIDEN.SPRIDEN_CHANGE_IND) Is Null)))";

		DateFormatter df = new DateFormatter();

		try {
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setString(1, "BU");
			prepStmt.setDate(2, java.sql.Date.valueOf(df.getSimpleDate()));
			prepStmt.setString(3, getCurrentTerm());
			prepStmt.setString(4, id);

			ResultSet rs = prepStmt.executeQuery();

			while (rs.next()) {
				found = true;
			}

			prepStmt.close();
			rs.close();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return found;

	}
	public String studentHoldQuery() {

		String sqlstmt = "select DISTINCT SPRIDEN.SPRIDEN_ID,SGBSTDN.SGBSTDN_TERM_CODE_EFF,SPRIDEN.SPRIDEN_PIDM,"
				+ "SGBSTDN.SGBSTDN_LEVL_CODE,SPRIDEN.SPRIDEN_LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME,"
				+ "SGBSTDN.SGBSTDN_STST_CODE,SPRHOLD.SPRHOLD_HLDD_CODE,SPRHOLD.SPRHOLD_TO_DATE "
				+ "from SATURN.SPRIDEN SPRIDEN,SATURN.SGBSTDN SGBSTDN, SATURN.SPRHOLD SPRHOLD "
				+ "where ( SPRIDEN.SPRIDEN_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ " and SGBSTDN.SGBSTDN_PIDM = SPRHOLD.SPRHOLD_PIDM ) "
				+ " and ( ((SGBSTDN.SGBSTDN_STST_CODE = ? "
				+ "  and SPRHOLD.SPRHOLD_TO_DATE = to_date(?,'yyyy/mm/dd')) "
				+ "  or (SGBSTDN.SGBSTDN_STST_CODE = ? "
				+ "  and SPRHOLD.SPRHOLD_TO_DATE =   to_date(?,'yyyy/mm/dd'))) "
				+ "  and SPRIDEN.SPRIDEN_CHANGE_IND is null "
				+ "  and SPRIDEN.SPRIDEN_ID = ? "
				+ "  and ( SGBSTDN.SGBSTDN_PIDM, SGBSTDN.SGBSTDN_TERM_CODE_EFF )  = "
				+ "  ( select SGBSTDN1.SGBSTDN_PIDM, "
				+ " Max( SGBSTDN1.SGBSTDN_TERM_CODE_EFF ) AS Max_SGBSTDN_TERM_CODE_EFF "
				+ " from SATURN.SGBSTDN SGBSTDN1 "
				+ " where SGBSTDN1.SGBSTDN_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "     group by SGBSTDN1.SGBSTDN_PIDM ) )";

		return sqlstmt;

	}
	private String gatherStudentUserQuery() {

		/*
		 * 
		 * */ 
       //, '201905'
		String sqlstmt = "select distinct SPRIDEN.SPRIDEN_ID AS ID, SPRIDEN.SPRIDEN_LAST_NAME AS LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME AS FIRST_NAME, "
				+ " GOREMAL.GOREMAL_EMAIL_ADDRESS AS EMAIL, STVNATN.STVNATN_NATION AS COUNTRY, "
				+ "STVNATN.STVNATN_CAPITAL AS CITY, SGBSTDN_LEVL_CODE, SGBSTDN.SGBSTDN_STST_CODE AS STST_CODE "
				+ "from SATURN.SPRIDEN SPRIDEN,SATURN.SGBSTDN SGBSTDN,SATURN.STVSTST STVSTST,"
				+ "GENERAL.GOREMAL GOREMAL, SATURN.STVNATN STVNATN, GENERAL.GOBINTL GOBINTL, SATURN.STVDEPT STVDEPT "
				+ "where ( STVSTST.STVSTST_CODE = SGBSTDN.SGBSTDN_STST_CODE "
				+ "and SPRIDEN.SPRIDEN_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOREMAL.GOREMAL_PIDM (+) = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOBINTL.GOBINTL_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOBINTL.GOBINTL_NATN_CODE_LEGAL = STVNATN.STVNATN_CODE (+) ) "
				+ "and ( SGBSTDN.SGBSTDN_TERM_CODE_EFF in (?,?,?) "
				+ "and GOREMAL.GOREMAL_EMAL_CODE = ? AND SGBSTDN_CAMP_CODE = 'I' "
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND IS NULL "
				+ "and ( SGBSTDN.SGBSTDN_PIDM, SGBSTDN.SGBSTDN_TERM_CODE_EFF )  = "
				+ "  ( select SGBSTDN1.SGBSTDN_PIDM, "
				+ "     Max( SGBSTDN1.SGBSTDN_TERM_CODE_EFF ) AS Max_SGBSTDN_TERM_CODE_EFF "
				+ "  from SATURN.SGBSTDN SGBSTDN1 "
				+ "      where(SGBSTDN1.SGBSTDN_PIDM = SGBSTDN.SGBSTDN_PIDM) "
				+ " group by SGBSTDN1.SGBSTDN_PIDM ) "
				+" ) ";
		
		//+ "and SGBSTDN.SGBSTDN_DEPT_CODE NOT IN ('601','620') "

		return sqlstmt;

	}
	private String gatheMoodleDropQuery() {

		/*
		 * 
		 * */ 

		String sqlstmt = "select distinct SPRIDEN.SPRIDEN_ID AS ID, SPRIDEN.SPRIDEN_LAST_NAME AS LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME AS FIRST_NAME, "
				+ " GOREMAL.GOREMAL_EMAIL_ADDRESS AS EMAIL, STVNATN.STVNATN_NATION AS COUNTRY, "
				+ "STVNATN.STVNATN_CAPITAL AS CITY, SGBSTDN_LEVL_CODE, SGBSTDN.SGBSTDN_STST_CODE AS STST_CODE "
				+ "from SATURN.SPRIDEN SPRIDEN,SATURN.SGBSTDN SGBSTDN,SATURN.STVSTST STVSTST,"
				+ "GENERAL.GOREMAL GOREMAL, SATURN.STVNATN STVNATN, GENERAL.GOBINTL GOBINTL, SATURN.STVDEPT STVDEPT "
				+ "where ( STVSTST.STVSTST_CODE = SGBSTDN.SGBSTDN_STST_CODE "
				+ "and SPRIDEN.SPRIDEN_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOREMAL.GOREMAL_PIDM (+) = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOBINTL.GOBINTL_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOBINTL.GOBINTL_NATN_CODE_LEGAL = STVNATN.STVNATN_CODE (+) ) "
				+ "and ( SGBSTDN.SGBSTDN_TERM_CODE_EFF in (?,?,?) "
				+ "and GOREMAL.GOREMAL_EMAL_CODE = ? "
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND IS NULL "
				+ "and ( SGBSTDN.SGBSTDN_PIDM, SGBSTDN.SGBSTDN_TERM_CODE_EFF )  = "
				+ "  ( select SGBSTDN1.SGBSTDN_PIDM, "
				+ "     Max( SGBSTDN1.SGBSTDN_TERM_CODE_EFF ) AS Max_SGBSTDN_TERM_CODE_EFF "
				+ "  from SATURN.SGBSTDN SGBSTDN1 "
				+ "      where(SGBSTDN1.SGBSTDN_PIDM = SGBSTDN.SGBSTDN_PIDM) "
				+ " group by SGBSTDN1.SGBSTDN_PIDM ) "
				+" ) ";
		
		//+ "and SGBSTDN.SGBSTDN_DEPT_CODE NOT IN ('601','620') "

		return sqlstmt;

	}
	private String gatherStudentUserQueryTest() {

		/*
		 * 
		 * */ 

		String sqlstmt = "select distinct SPRIDEN.SPRIDEN_ID AS ID, SPRIDEN.SPRIDEN_LAST_NAME AS LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME AS FIRST_NAME, "
				+ " GOREMAL.GOREMAL_EMAIL_ADDRESS AS EMAIL, STVNATN.STVNATN_NATION AS COUNTRY, "
				+ "STVNATN.STVNATN_CAPITAL AS CITY, SGBSTDN_LEVL_CODE, SGBSTDN.SGBSTDN_STST_CODE AS STST_CODE "
				+ "from SATURN.SPRIDEN SPRIDEN,SATURN.SGBSTDN SGBSTDN,SATURN.STVSTST STVSTST,"
				+ "GENERAL.GOREMAL GOREMAL, SATURN.STVNATN STVNATN, GENERAL.GOBINTL GOBINTL, SATURN.STVDEPT STVDEPT "
				+ "where ( STVSTST.STVSTST_CODE = SGBSTDN.SGBSTDN_STST_CODE "
				+ "and SPRIDEN.SPRIDEN_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOREMAL.GOREMAL_PIDM (+) = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOBINTL.GOBINTL_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "and GOBINTL.GOBINTL_NATN_CODE_LEGAL = STVNATN.STVNATN_CODE (+) ) "
				+ "and ( SGBSTDN.SGBSTDN_TERM_CODE_EFF in (?,?,?) "
				+ "and GOREMAL.GOREMAL_EMAL_CODE = ? AND SPRIDEN.SPRIDEN_ID = ? "
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND IS NULL "
				+ "and ( SGBSTDN.SGBSTDN_PIDM, SGBSTDN.SGBSTDN_TERM_CODE_EFF )  = "
				+ "  ( select SGBSTDN1.SGBSTDN_PIDM, "
				+ "     Max( SGBSTDN1.SGBSTDN_TERM_CODE_EFF ) AS Max_SGBSTDN_TERM_CODE_EFF "
				+ "  from SATURN.SGBSTDN SGBSTDN1 "
				+ "      where(SGBSTDN1.SGBSTDN_PIDM = SGBSTDN.SGBSTDN_PIDM) "
				+ " group by SGBSTDN1.SGBSTDN_PIDM ) "
				+" ) ";
		
		//+ "and SGBSTDN.SGBSTDN_DEPT_CODE NOT IN ('601','620') "

		return sqlstmt;

	}
	private String gatherLecturerCAUserQuery() {
		
		String sqlstmt = "SELECT DISTINCT SIRASGN.SIRASGN_TERM_CODE AS TERM_CODE, SIRASGN.SIRASGN_CRN , SPRIDEN.SPRIDEN_ID AS ID, "
				+ "SPRIDEN.SPRIDEN_LAST_NAME AS LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME AS FIRST_NAME, GOREMAL.GOREMAL_EMAIL_ADDRESS "
				+ "FROM (SIRASGN INNER JOIN SPRIDEN ON SIRASGN.SIRASGN_PIDM = SPRIDEN.SPRIDEN_PIDM)  "
				+"INNER JOIN GENERAL.GOREMAL GOREMAL ON GOREMAL_PIDM = SIRASGN.SIRASGN_PIDM " 
				+ "INNER JOIN SIVSECM ON (SIRASGN.SIRASGN_TERM_CODE = SIVSECM.SIVSECM_TERM_CODE) AND "
				+ "(SIRASGN.SIRASGN_CRN = SIVSECM.SIVSECM_CRN) WHERE (((SIRASGN.SIRASGN_TERM_CODE)= ?) "
				+ " AND SPRIDEN.SPRIDEN_ID LIKE '%2000%'"
				+ "AND ((SIVSECM.SIVSECM_SCHD_CODE) in (?, ?,?,?,?,?)) AND ((SPRIDEN.SPRIDEN_CHANGE_IND) Is Null)  AND GOREMAL.GOREMAL_EMAL_CODE in ('CA'))";

		return sqlstmt;

	}
	
private String gatherLecturerNOTCAUserQuery() {

		String sqlstmt = "SELECT DISTINCT SIRASGN.SIRASGN_TERM_CODE AS TERM_CODE, SIRASGN.SIRASGN_CRN , SPRIDEN.SPRIDEN_ID AS ID, "
				+ "SPRIDEN.SPRIDEN_LAST_NAME AS LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME AS FIRST_NAME, GOREMAL.GOREMAL_EMAIL_ADDRESS "
				+ "FROM (SIRASGN INNER JOIN SPRIDEN ON SIRASGN.SIRASGN_PIDM = SPRIDEN.SPRIDEN_PIDM)  "
				+"INNER JOIN GENERAL.GOREMAL GOREMAL ON GOREMAL_PIDM = SIRASGN.SIRASGN_PIDM " 
				+ "INNER JOIN SIVSECM ON (SIRASGN.SIRASGN_TERM_CODE = SIVSECM.SIVSECM_TERM_CODE) AND  "
				+ "(SIRASGN.SIRASGN_CRN = SIVSECM.SIVSECM_CRN) INNER JOIN SSBSECT ON "+
				"(SSBSECT.SSBSECT_CRN = SIRASGN.SIRASGN_CRN) " +
				"WHERE (((SIRASGN.SIRASGN_TERM_CODE)= ?)  AND SSBSECT.SSBSECT_CAMP_CODE NOT IN ('C') " 
				+ " AND SPRIDEN.SPRIDEN_ID NOT LIKE '%2000%'"
				+ "AND ((SIVSECM.SIVSECM_SCHD_CODE) in ('L', 'R','P','W','K','T')) AND ((SPRIDEN.SPRIDEN_CHANGE_IND) Is Null)  AND GOREMAL.GOREMAL_EMAL_CODE in ('PE'))";
		
		sqlstmt = "SELECT DISTINCT SIRASGN.SIRASGN_TERM_CODE AS TERM_CODE, SIRASGN.SIRASGN_CRN , SPRIDEN.SPRIDEN_ID AS ID, "
				+ "SPRIDEN.SPRIDEN_LAST_NAME AS LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME AS FIRST_NAME, GOREMAL.GOREMAL_EMAIL_ADDRESS "
				+ "FROM (SIRASGN INNER JOIN SPRIDEN ON SIRASGN.SIRASGN_PIDM = SPRIDEN.SPRIDEN_PIDM)  "
				+"INNER JOIN GENERAL.GOREMAL GOREMAL ON GOREMAL_PIDM = SIRASGN.SIRASGN_PIDM " 
				+ "INNER JOIN SIVSECM ON (SIRASGN.SIRASGN_TERM_CODE = SIVSECM.SIVSECM_TERM_CODE) AND  "
				+ "(SIRASGN.SIRASGN_CRN = SIVSECM.SIVSECM_CRN) INNER JOIN SSBSECT ON "+
				"(SSBSECT.SSBSECT_CRN = SIRASGN.SIRASGN_CRN) " +
				"WHERE (((SIRASGN.SIRASGN_TERM_CODE)= ?)  AND SSBSECT.SSBSECT_CAMP_CODE IN ('I') " 
				+ " AND SPRIDEN.SPRIDEN_ID NOT LIKE '%2000%'"
				+ "AND ((SIVSECM.SIVSECM_SCHD_CODE) in ('L', 'R','P','W','K','T')) AND ((SPRIDEN.SPRIDEN_CHANGE_IND) Is Null)  AND GOREMAL.GOREMAL_EMAL_CODE in ('PE'))";

		return sqlstmt;

	}
	
	private String gatherStudentEnrollmentsQuery() {
        //,'201905'
		String sqlstmt = "select SFRSTCR.SFRSTCR_TERM_CODE AS TERM_CODE,SPRIDEN.SPRIDEN_FIRST_NAME AS FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_LAST_NAME AS LAST_NAME,SGBSTDN.SGBSTDN_LEVL_CODE AS LEVL_CODE,SSBSECT.SSBSECT_SUBJ_CODE AS SUBJ_CODE, "
				+ "SSBSECT.SSBSECT_CRSE_NUMB AS CRSE_NUMB,SPRIDEN.SPRIDEN_ID AS ID,SPRIDEN.SPRIDEN_MI AS INIT, "
				+ "CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB) AS COURSE_CODE,SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE, "
				+ "SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB,SGBSTDN.SGBSTDN_STYP_CODE AS STYP_CODE,SFRSTCR.SFRSTCR_RSTS_CODE AS RSTS_CODE, "
				+ "SSBSECT.SSBSECT_CRN from SATURN.SSBSECT SSBSECT, "
				+ "SATURN.SPRIDEN SPRIDEN, "
				+ "SATURN.SFRSTCR SFRSTCR, "
				+ "SATURN.SCBCRSE SCBCRSE, "
				+ "SATURN.SGBSTDN SGBSTDN "
				+ "where ( SFRSTCR.SFRSTCR_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE "
				+ "and SFRSTCR.SFRSTCR_CRN = SSBSECT.SSBSECT_CRN "
				+ "and SFRSTCR.SFRSTCR_PIDM = SPRIDEN.SPRIDEN_PIDM "
				+ "and SSBSECT.SSBSECT_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and SSBSECT.SSBSECT_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "and SGBSTDN.SGBSTDN_PIDM = SFRSTCR.SFRSTCR_PIDM "
				+ "and SGBSTDN.SGBSTDN_TERM_CODE_EFF = SFRSTCR.SFRSTCR_TERM_CODE ) "
				+ "and ( SSBSECT.SSBSECT_SCHD_CODE in (?,?) "
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND is null "
				+ "and SFRSTCR.SFRSTCR_TERM_CODE IN (?) "
				+ "and ( SCBCRSE.SCBCRSE_EFF_TERM, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_SUBJ_CODE )  = "
				+ "( select Max( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM, "
				+ "SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "SCBCRSE1.SCBCRSE_SUBJ_CODE "
				+ "from SATURN.SCBCRSE SCBCRSE1 "
				+ "where SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "group by SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "SCBCRSE1.SCBCRSE_SUBJ_CODE ) "
				+ "and ( SGBSTDN.SGBSTDN_PIDM, SGBSTDN.SGBSTDN_TERM_CODE_EFF )  = "
				+ "( select SGBSTDN1.SGBSTDN_PIDM, "
				+ "Max( SGBSTDN1.SGBSTDN_TERM_CODE_EFF ) AS Max_SGBSTDN_TERM_CODE_EFF "
				+ "from SATURN.SGBSTDN SGBSTDN1 "
				+ "where SGBSTDN1.SGBSTDN_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "group by SGBSTDN1.SGBSTDN_PIDM ) ) "
				+ "order by SPRIDEN.SPRIDEN_LAST_NAME, "
				+ "SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_MI, "
				+ "SPRIDEN.SPRIDEN_ID";

		/*
		 * private int TERM; private int SUBJ; private int CRSE; private int ID;
		 * private int SEQNO; private int CRN;
		 */
		TERM = 1;
		SUBJ = 5;
		CRSE = 6;
		ID = 7;
		SEQNO = 11;

		return sqlstmt;

	}
private String gatherlecturerEnrollmentExamsQuery() {
    	
    	
		String enrol = "select SPRIDEN.SPRIDEN_ID as username, SPRIDEN.SPRIDEN_FIRST_NAME as firstname, " 
				+ "SPRIDEN.SPRIDEN_LAST_NAME as lastname,  GOREMAL.GOREMAL_EMAIL_ADDRESS as email, "
				+ "CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SIRASGN.SIRASGN_TERM_CODE,SCBCRSE.SCBCRSE_SUBJ_CODE),SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),SSBSECT.SSBSECT_CAMP_CODE),'-'),'EXAM')  AS COURSE,"
				+"'lecturer' as ROLE,  " 
				+ "CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB) AS COURSE_CODE  "
//				+ "SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB, "
//				+ "SSBSECT.SSBSECT_SCHD_CODE,SSBSECT.SSBSECT_SCHD_CODE,SPRIDEN.SPRIDEN_ID, "
//				+ "SSBSECT.SSBSECT_CAMP_CODE,"
//				+ "SSBSECT.SSBSECT_SEQ_NUMB," +
//				+ "SSBSECT.SSBSECT_CRN,  "
//				+ "SIRASGN.SIRASGN_PRIMARY_IND " 
				+ "from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN, "
				+ "GOREMAL GOREMAL  "
				+ "where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM "
				+ "and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE "
				+ " GOREMAL.GOREMAL_PIDM =  SIRASGN.SIRASGN_PIDM "
				+ "and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) "
//				+ "and ( SSBSECT.SSBSECT_SCHD_CODE in ('F') "
				+ "and SSBSECT.SSBSECT_GRADABLE_IND = 'Y' "
                + "SSBSECT.SSBSECT_CAMP_CODE = 'I' "
//				+ "and SSBSECT.SSBSECT_SEQ_NUMB = 'F01' and SPRIDEN.SPRIDEN_ID = '10030558' " 
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND is null "
				+ "and SIRASGN.SIRASGN_TERM_CODE IN (?,'201905')) "
				+ "order by SPRIDEN.SPRIDEN_LAST_NAME, "
				+ "SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID ";
		
		
		enrol = "select SPRIDEN.SPRIDEN_ID as username, SPRIDEN.SPRIDEN_FIRST_NAME as firstname, "+ 
        "SPRIDEN.SPRIDEN_LAST_NAME as lastname,  GOREMAL.GOREMAL_EMAIL_ADDRESS as email, "+
        "CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SIRASGN.SIRASGN_TERM_CODE,SSBSECT.SSBSECT_SUBJ_CODE),SSBSECT.SSBSECT_CRSE_NUMB),'-'),SSBSECT.SSBSECT_CAMP_CODE),'-'),'EXAM')  AS COURSE, "+
        " 'lecturer' as ROLE, " +  
        "CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB) AS COURSE_CODE  " +

        "from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN, "+
        "GOREMAL GOREMAL  " +
        "where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM " +
        "and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE " +
        "and GOREMAL.GOREMAL_PIDM =  SIRASGN.SIRASGN_PIDM " +
        "and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) " +

        "and SSBSECT.SSBSECT_GRADABLE_IND = 'Y' " +
        "and SSBSECT.SSBSECT_CAMP_CODE = 'C' " +
        "and GOREMAL.GOREMAL_EMAL_CODE = 'CA' " +

        "and SPRIDEN.SPRIDEN_CHANGE_IND is null " +
       "and SIRASGN.SIRASGN_TERM_CODE IN (?) " +
        "order by SPRIDEN.SPRIDEN_LAST_NAME, " +
        "SPRIDEN.SPRIDEN_FIRST_NAME, " +
        "SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID" ;

		TERM = 1;
		SUBJ = 4;
		CRSE = 5;
		ID = 8;
		SEQNO = 9;
		CRN = 10;
        PRIMARY_IND = 11;
        
		return enrol;

    	
    }
	//course.getSubjCode() + course.getCrseNumb() + "-" + course.getSeqNumb() + " - " + course.getTermCode()
    private String eThinkEnrollmentsQRY() {
    	String sqlstmt="";
    	
    	sqlstmt =  "SELECT DISTINCT AS_STUDENT_REGISTRATION_DETAIL.ID AS username, AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME as firstname,"+
                "AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME as lastname,GOREMAL.GOREMAL_EMAIL_ADDRESS as email,"+
                
//              "CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),CONCAT(SSBSECT.SSBSECT_SEQ_NUMB,'-Exam')),' - '),AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY)  AS COURSE," +
// 
//            "CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),SSBSECT.SSBSECT_SEQ_NUMB),' - '),AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY)  AS COURSE," +
//            "CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY,SCBCRSE.SCBCRSE_SUBJ_CODE),SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),SSBSECT.SSBSECT_CAMP_CODE),'-'),SSBSECT.SSBSECT_SEQ_NUMB)  AS COURSE,"      +
//"CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY,SCBCRSE.SCBCRSE_SUBJ_CODE),SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),SSBSECT.SSBSECT_CAMP_CODE),'-'),'EXAM')  AS COURSE,"      +

//"CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY,SCBCRSE.SCBCRSE_SUBJ_CODE),SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),'C'),'-'),'EXAM')  AS COURSE,"  +
//                  "'SUCCESS101' AS COURSE," +
			                "DECODE(SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1, " +
			                 "NULL, " +
//			                    "CONCAT(CONCAT(CONCAT(CONCAT(AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY,SCBCRSE.SCBCRSE_SUBJ_CODE),SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),SSBSECT.SSBSECT_CAMP_CODE),'-'),SSBSECT.SSBSECT_SEQ_NUMB),"      +
			                "CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY,SCBCRSE.SCBCRSE_SUBJ_CODE),SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),SSBSECT.SSBSECT_CAMP_CODE),'-'),SSBSECT.SSBSECT_SEQ_NUMB),"      +
			                "CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1),'-'),SSBSECT.SSBSECT_SEQ_NUMB),' - '),AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY)) AS COURSE, "+  
            
    	  
                "'student' as ROLE,  " +
                "CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB) AS COURSE_CODE  "+ 
//                "'SUCCESS101' "+
                   "FROM SATURN.SSBSECT SSBSECT,"+ 
                   "SATURN.SCBCRSE SCBCRSE,"+ 
                   "GOREMAL GOREMAL,"+
                   "SATURN.SGBSTDN SGBSTDN, "+
                   "SATURN.STVMAJR STVMAJR, "+
                   "BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL " + 
                   "WHERE ( SSBSECT.SSBSECT_CRN = AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY  " + 
                   "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE " +  
                   "AND AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY = SGBSTDN.SGBSTDN_PIDM " +  
                   "AND AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY = SGBSTDN.SGBSTDN_PIDM   "+
                   "AND STVMAJR.STVMAJR_CODE(+) = SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1 "+
                   "AND GOREMAL.GOREMAL_PIDM = AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY  " + 
                   "AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE   " + 
                   "AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB )   " + 
                   "AND ( SSBSECT.SSBSECT_SCHD_CODE in ('L','R','P','W','K')  AND GOREMAL.GOREMAL_EMAL_CODE = 'CA'  " + 
                   //"AND SSBSECT.SSBSECT_CAMP_CODE IN ('I') "+
//                   "AND SGBSTDN.SGBSTDN_STYP_CODE = 'N' " +
                   "and SSBSECT.SSBSECT_CAMP_CODE = 'C' " +
                   "AND SCBCRSE.SCBCRSE_SUBJ_CODE = 'PDLL' "+
                   "AND SCBCRSE.SCBCRSE_CRSE_NUMB = 115 " +
                   "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY in (?)  " + 
                   "AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  =  " +  
                   "( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE,   " + 
                    "           SCBCRSE1.SCBCRSE_CRSE_NUMB,   " + 
                    "          MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM   " + 
                    "     FROM SATURN.SCBCRSE SCBCRSE1   " + 
                    "            WHERE(SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE)    " + 
                    "          AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB   " + 
                    "    GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE,   " + 
                    "             SCBCRSE1.SCBCRSE_CRSE_NUMB ) )  " + 
                    "ORDER BY  AS_STUDENT_REGISTRATION_DETAIL.ID  " ;
    	
//    	sqlstmt =  "SELECT DISTINCT AS_STUDENT_REGISTRATION_DETAIL.ID AS username, AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME as firstname,"+
//                "AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME as lastname,GOREMAL.GOREMAL_EMAIL_ADDRESS as email,"+
//                
//              "CONCAT(SSBSECT.SSBSECT_TERM_CODE,CONCAT(CONCAT(CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB),'-'),CONCAT(SSBSECT.SSBSECT_CAMP_CODE,'-Exam'))) AS COURSE," +
//            
//    	  
//                "'student' as ROLE,  " +
//                "CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB) AS COURSE_CODE  "+ 
//
//                   "FROM SATURN.SSBSECT SSBSECT,"+ 
//                   "SATURN.SCBCRSE SCBCRSE,"+ 
//                   "GOREMAL GOREMAL,"+
//                   "SATURN.SGBSTDN SGBSTDN, "+
//                   "SATURN.STVMAJR STVMAJR, "+
//                   "BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL " + 
//                   "WHERE ( SSBSECT.SSBSECT_CRN = AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY  " + 
//                   "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE " +  
//                   "AND AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY = SGBSTDN.SGBSTDN_PIDM " +  
//                   "AND AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY = SGBSTDN.SGBSTDN_PIDM   "+
//                   "AND STVMAJR.STVMAJR_CODE(+) = SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1 "+
//                   "AND GOREMAL.GOREMAL_PIDM = AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY  " + 
//                   "AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE   " + 
//                   "AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB )   " + 
//                   "AND ( SSBSECT.SSBSECT_SCHD_CODE in ('L','R','P','W','K')  AND GOREMAL.GOREMAL_EMAL_CODE = 'CA'  " + 
//                   
//                   "and SSBSECT.SSBSECT_CAMP_CODE = 'C' " +
//                   "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY in (?)  " + 
//                   "AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  =  " +  
//                   "( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE,   " + 
//                    "           SCBCRSE1.SCBCRSE_CRSE_NUMB,   " + 
//                    "          MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM   " + 
//                    "     FROM SATURN.SCBCRSE SCBCRSE1   " + 
//                    "            WHERE(SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE)    " + 
//                    "          AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB   " + 
//                    "    GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE,   " + 
//                    "             SCBCRSE1.SCBCRSE_CRSE_NUMB ) )  " + 
//                    "ORDER BY  AS_STUDENT_REGISTRATION_DETAIL.ID  " ;

    	
    	
//    	sqlstmt = "select SPRIDEN.SPRIDEN_ID as username,SPRIDEN.SPRIDEN_FIRST_NAME as firstname,SPRIDEN.SPRIDEN_LAST_NAME as lastname,  "
//				+ "GOREMAL.GOREMAL_EMAIL_ADDRESS as email, "
////				+"CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB),'-'),CONCAT(SSBSECT.SSBSECT_SEQ_NUMB,'-Exam')),' - '),SIRASGN.SIRASGN_TERM_CODE) AS COURSE, "
//				//+"CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB),'-'),CONCAT(SSBSECT.SSBSECT_SEQ_NUMB,'-RESIT')),' - '),SIRASGN.SIRASGN_TERM_CODE) AS COURSE, "
//				+"CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB),'-'),SSBSECT.SSBSECT_SEQ_NUMB),' - '),SIRASGN.SIRASGN_TERM_CODE) AS COURSE, "
//    			+ "'lecturer' as ROLE, "
//    			+ "SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB, "
//				+ "SSBSECT.SSBSECT_SCHD_CODE,SSBSECT.SSBSECT_SCHD_CODE, "
//				+ "SSBSECT.SSBSECT_SEQ_NUMB,SSBSECT.SSBSECT_CRN,  SIRASGN.SIRASGN_PRIMARY_IND, SIRASGN.SIRASGN_TERM_CODE, CONCAT(SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB) AS COURSE_CODE " 
//				+ "from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN, GOREMAL GOREMAL "
//				+ "where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM "
//				+ "and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE "
//				+ "and GOREMAL.GOREMAL_PIDM = SPRIDEN.SPRIDEN_PIDM "
//				+ "and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) "
//				+ "and ( SSBSECT.SSBSECT_SCHD_CODE in ('L','R','W','K','P','T') "
//				//+"and SSBSECT.SSBSECT_CAMP_CODE = 'I' "
//				//+ "and  SSBSECT.SSBSECT_SEQ_NUMB not in ('F01') "
////				+ "and GOREMAL.GOREMAL_EMAL_CODE = 'CA' "
//				+ "and SSBSECT.SSBSECT_GRADABLE_IND = 'Y' "
//				+ "and SPRIDEN.SPRIDEN_CHANGE_IND is null "
//				+ "and SIRASGN.SIRASGN_TERM_CODE IN (?)) "
//				+ "order by SPRIDEN.SPRIDEN_LAST_NAME, "
//				+ "SPRIDEN.SPRIDEN_FIRST_NAME, "
//				+ "SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID ";
//    	
    	
    	
    	
//    	sqlstmt=" select SIRASGN.SIRASGN_TERM_CODE, SPRIDEN.SPRIDEN_FIRST_NAME, 
//                 SPRIDEN.SPRIDEN_LAST_NAME,SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB, 
//                 SSBSECT.SSBSECT_SCHD_CODE,SSBSECT.SSBSECT_SCHD_CODE,SPRIDEN.SPRIDEN_ID, 
//                 SSBSECT.SSBSECT_SEQ_NUMB,SSBSECT.SSBSECT_CRN,  SIRASGN.SIRASGN_PRIMARY_IND  
//                 from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN 
//                 where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM 
//                 and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE 
//                 and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) 
//                 and ( SSBSECT.SSBSECT_SCHD_CODE in ('L','R','W','K','P','T') 
//                 --and  SSBSECT.SSBSECT_SEQ_NUMB not in ('F01') 
//                 and SSBSECT.SSBSECT_GRADABLE_IND = 'Y' 
//                 and SPRIDEN.SPRIDEN_CHANGE_IND is null 
//                 and SIRASGN.SIRASGN_TERM_CODE IN ('202010')) 
//                 order by SPRIDEN.SPRIDEN_LAST_NAME, 
//                 SPRIDEN.SPRIDEN_FIRST_NAME, 
//                 SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID ;
    	 

    	
    	
    	sqlstmt = "SELECT DISTINCT SPRIDEN.SPRIDEN_ID AS username, SPRIDEN.SPRIDEN_FIRST_NAME as firstname,"+
        "SPRIDEN.SPRIDEN_LAST_NAME as lastname,GOREMAL.GOREMAL_EMAIL_ADDRESS as email,"+
    " 'FSS2021-00-202110' AS SHORT_NAME, "+
        " 'student' as ROLE, 'FSS' AS SUBJ_CODE, '2021' AS CRSE_NUMB," +
        "'00' AS SEQ_NUMB, '00000' AS CRN " +
           "FROM SATURN.SGBSTDN  , "+
           "GOREMAL GOREMAL, "+
           "SATURN.SPRIDEN SPRIDEN "+       
           "WHERE (    SGBSTDN.SGBSTDN_PIDM = GOREMAL.GOREMAL_PIDM AND " +
                         "    SGBSTDN.SGBSTDN_PIDM = SPRIDEN.SPRIDEN_PIDM " +
           ") "+     
           "AND SPRIDEN.SPRIDEN_CHANGE_IND IS NULL " +
           "AND  GOREMAL.GOREMAL_EMAL_CODE = 'CA'  " +
           "AND  SGBSTDN.SGBSTDN_COLL_CODE_1 = 'SS' " +
           "AND SGBSTDN.SGBSTDN_STYP_CODE in ('N','T','S','F')  "+
           "AND SGBSTDN.SGBSTDN_TERM_CODE_EFF >= (?)";
    	
    	return sqlstmt;
    }
    
	private String gatherEnrollmentsQuery() {
       //,'201905'
		String sqlstmt = "SELECT AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY AS TERM_CODE,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LEVL_CODE,"
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,AS_STUDENT_REGISTRATION_DETAIL.ID AS ID,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.MIDDLE_INITIAL,"
				+ "CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, "
				+ "SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.STYP_CODE AS STYP_CODE,AS_STUDENT_REGISTRATION_DETAIL.RSTS_CODE AS RSTS_CODE, "
				+ "SSBSECT.SSBSECT_CRN "
				+ "FROM SATURN.SSBSECT SSBSECT, "
				+ "SATURN.SCBCRSE SCBCRSE, "
				+ "BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL "
				+ "WHERE ( SSBSECT.SSBSECT_CRN = AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
				+ "AND ( SSBSECT.SSBSECT_SCHD_CODE in (?,?,?,?,?)  "
				+ "AND SSBSECT.SSBSECT_SEQ_NUMB not in ('F01')  " 
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY in (?) "
				+ "AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "  ( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "           SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "           MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM "
				+ "      FROM SATURN.SCBCRSE SCBCRSE1 "
				+ "             WHERE(SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE) "
				+ "           AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "     GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "              SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) ";

		// "AND SCBCRSE.SCBCRSE_SUBJ_CODE = ? " +

		return sqlstmt;

	}

	private String gatherEnrollmentsByIDQuery() {

		String sqlstmt = "SELECT AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY AS TERM_CODE,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LEVL_CODE,"
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,AS_STUDENT_REGISTRATION_DETAIL.ID AS ID,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.MIDDLE_INITIAL,"
				+ "CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, "
				+ "SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.STYP_CODE AS STYP_CODE,AS_STUDENT_REGISTRATION_DETAIL.RSTS_CODE AS RSTS_CODE, "
				+ "SSBSECT.SSBSECT_CRN "
				+ "FROM SATURN.SSBSECT SSBSECT, "
				+ "SATURN.SCBCRSE SCBCRSE, "
				+ "BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL "
				+ "WHERE ( SSBSECT.SSBSECT_CRN = AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
				+ "AND ( SSBSECT.SSBSECT_SCHD_CODE in (?,?,?,?) "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = ? AND AS_STUDENT_REGISTRATION_DETAIL.ID = ? AND AS_STUDENT_REGISTRATION_DETAIL.COLL_CODE NOT IN ('PA','MD') "
				+ "AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "  ( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "           SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "           MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM "
				+ "      FROM SATURN.SCBCRSE SCBCRSE1 "
				+ "             WHERE(SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE) "
				+ "           AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "     GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "              SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) ";

		return sqlstmt;

	}

	public String locateCRN() {

		String sqlstmt = "SELECT AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY AS TERM_CODE,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LEVL_CODE,"
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,AS_STUDENT_REGISTRATION_DETAIL.ID AS ID,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.MIDDLE_INITIAL,"
				+ "CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, "
				+ "SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.STYP_CODE AS STYP_CODE,AS_STUDENT_REGISTRATION_DETAIL.RSTS_CODE AS RSTS_CODE, "
				+ "SSBSECT.SSBSECT_CRN AS CRN "
				+ "FROM SATURN.SSBSECT SSBSECT, "
				+ "SATURN.SCBCRSE SCBCRSE, "
				+ "BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL "
				+ "WHERE ( SSBSECT.SSBSECT_CRN = AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
				+ "AND ( SSBSECT.SSBSECT_SCHD_CODE in (?,?,?,?) "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = ? "
				+ "AND SSBSECT.SSBSECT_CRN = ? "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.ID =  ? "
				+ "AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "  ( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "           SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "           MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM "
				+ "      FROM SATURN.SCBCRSE SCBCRSE1 "
				+ "             WHERE(SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE) "
				+ "           AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "     GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "              SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) ";

		return sqlstmt;

	}

	private String gatherDroppedCRNs() {

		String sqlstmt = "select SFRSTCR.SFRSTCR_TERM_CODE, SFRSTCR.SFRSTCR_CRN, SFRSTCR.SFRSTCR_RSTS_CODE, "
				+ "SPRIDEN.SPRIDEN_ID, SPRIDEN.SPRIDEN_LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME, SPRIDEN.SPRIDEN_MI "
				+ "from SATURN.SFRSTCR SFRSTCR, SATURN.SPRIDEN SPRIDEN "
				+ "where ( SFRSTCR.SFRSTCR_PIDM = SPRIDEN.SPRIDEN_PIDM ) "
				+ "and (SFRSTCR.SFRSTCR_TERM_CODE = ? "
				+ "and SFRSTCR.SFRSTCR_RSTS_CODE in (?,?,?,?,?,?,?))";

		/*
		 * String sqlstmt =
		 * "select SFRSTCA.SFRSTCA_TERM_CODE,SFRSTCA.SFRSTCA_PIDM,SFRSTCA.SFRSTCA_CRN, "
		 * +
		 * "SFRSTCA.SFRSTCA_SEQ_NUMBER,SFRSTCA.SFRSTCA_RSTS_CODE,SPRIDEN.SPRIDEN_ID "
		 * + "from SATURN.SFRSTCA SFRSTCA, SATURN.SPRIDEN SPRIDEN " +
		 * "where ( SPRIDEN.SPRIDEN_PIDM = SFRSTCA.SFRSTCA_PIDM ) " +
		 * "and ( SFRSTCA.SFRSTCA_RSTS_CODE in (?,?,?,?,?,?,?) " +
		 * "and SFRSTCA.SFRSTCA_TERM_CODE = ? and SPRIDEN.SPRIDEN_CHANGE_IND is null "
		 * +
		 * "and ( SFRSTCA.SFRSTCA_TERM_CODE, SFRSTCA.SFRSTCA_PIDM, SFRSTCA.SFRSTCA_CRN, SFRSTCA.SFRSTCA_SEQ_NUMBER )  = "
		 * +
		 * "( select SFRSTCA1.SFRSTCA_TERM_CODE, SFRSTCA1.SFRSTCA_PIDM, SFRSTCA1.SFRSTCA_CRN, "
		 * + "Max( SFRSTCA1.SFRSTCA_SEQ_NUMBER ) AS Max_SFRSTCA_SEQ_NUMBER " +
		 * "from SATURN.SFRSTCA SFRSTCA1 " +
		 * "where SFRSTCA1.SFRSTCA_TERM_CODE = SFRSTCA.SFRSTCA_TERM_CODE " +
		 * "and SFRSTCA1.SFRSTCA_PIDM = SFRSTCA.SFRSTCA_PIDM " +
		 * "and SFRSTCA1.SFRSTCA_CRN = SFRSTCA.SFRSTCA_CRN " +
		 * "group by SFRSTCA1.SFRSTCA_TERM_CODE, " +
		 * "SFRSTCA1.SFRSTCA_PIDM,SFRSTCA1.SFRSTCA_CRN ) )";
		 */
		return sqlstmt;
	}

	private String gatherEnrollmentbyCourseQuery() {

		String sqlstmt = "SELECT AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY AS TERM_CODE,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.LEVL_CODE,"
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,AS_STUDENT_REGISTRATION_DETAIL.ID AS ID,"
				+ "AS_STUDENT_REGISTRATION_DETAIL.MIDDLE_INITIAL,"
				+ "CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, "
				+ "SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.STYP_CODE AS STYP_CODE,AS_STUDENT_REGISTRATION_DETAIL.RSTS_CODE AS RSTS_CODE, "
				+ "SSBSECT.SSBSECT_CRN "
				+ "FROM SATURN.SSBSECT SSBSECT, "
				+ "SATURN.SCBCRSE SCBCRSE, "
				+ "BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL "
				+ "WHERE ( SSBSECT.SSBSECT_CRN = AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
				+ "AND ( SSBSECT.SSBSECT_SCHD_CODE in (?,?,?,?,?) "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = ? "
				+ "AND SCBCRSE.SCBCRSE_SUBJ_CODE = ? "
				+ "AND SCBCRSE.SCBCRSE_CRSE_NUMB = ? "
				+ "AND SSBSECT.SSBSECT_SEQ_NUMB = ? "
				+ "AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "  ( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "           SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "           MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM "
				+ "      FROM SATURN.SCBCRSE SCBCRSE1 "
				+ "             WHERE(SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE) "
				+ "           AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "     GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "              SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) ";

		return sqlstmt;
	}

	private String gatherLectEnrollmentsQuery() {

		String enrolSQL = "SELECT AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME, AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME,AS_STUDENT_REGISTRATION_DETAIL.LEVL_CODE, "
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, AS_STUDENT_REGISTRATION_DETAIL.ID, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.MIDDLE_INITIAL, CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, "
				+ "SSBSECT.SSBSECT_SCHD_CODE, SSBSECT.SSBSECT_SEQ_NUMB, AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_ID, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_FIRST_NAME, AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_LAST_NAME, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_MIDDLE_INITIAL,SSBSECT.SSBSECT_CRN FROM SATURN.SSBSECT SSBSECT, SATURN.SCBCRSE SCBCRSE, "
				+ "BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL "
				+ "WHERE ( SSBSECT.SSBSECT_CRN = AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY "
				+ "  AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE "
				+ "  AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "  AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
				+ "AND ( SSBSECT.SSBSECT_SCHD_CODE in ('L','R') AND "
				+ "AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_ID ='20004931' "
				+ "AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = ? "
				+ "  AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "  ( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "MAX( SCBCRSE1.SCBCRSE_EFF_TERM )  AS Max_SCBCRSE_EFF_TERM "
				+ "FROM SATURN.SCBCRSE SCBCRSE1 "
				+ "WHERE SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) ";

		TERM = 1;
		SUBJ = 5;
		CRSE = 6;
		ID = 12;
		SEQNO = 11;
		CRN = 16;

		TERM = 1;
		SUBJ = 4;
		CRSE = 5;
		ID = 8;
		SEQNO = 9;
		CRN = 10;
        PRIMARY_IND = 11;
        
		return enrolSQL;

	}
	private String gatherLecturerByID () {
		
		String enrol = "select SIRASGN.SIRASGN_TERM_CODE, SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_LAST_NAME,SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB, "
				+ "SSBSECT.SSBSECT_SCHD_CODE,SSBSECT.SSBSECT_SCHD_CODE,SPRIDEN.SPRIDEN_ID, "
				+ "SSBSECT.SSBSECT_SEQ_NUMB,SSBSECT.SSBSECT_CRN,  SIRASGN.SIRASGN_PRIMARY_IND " 
				+ "from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN "
				+ "where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM "
				+ "and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE "
				+ "and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) "
				+ "and ( SSBSECT.SSBSECT_SCHD_CODE in ('T') "
				+ "and SSBSECT.SSBSECT_GRADABLE_IND = 'N' "
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND is null "
				+ "and SIRASGN.SIRASGN_TERM_CODE IN (?,'201905') and SPRIDEN.SPRIDEN_ID = ?) "
				+ "order by SPRIDEN.SPRIDEN_LAST_NAME, "
				+ "SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID ";

		TERM = 1;
		SUBJ = 4;
		CRSE = 5;
		ID = 8;
		SEQNO = 9;
		CRN = 10;
        PRIMARY_IND = 11;
        
		return enrol;

	}
    private String dropLecturers () {
    	
    		//'L','R','W','K','P',
    				String enrol = "select SIRASGN.SIRASGN_TERM_CODE, SPRIDEN.SPRIDEN_FIRST_NAME, "
    						+ "SPRIDEN.SPRIDEN_LAST_NAME,SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB, "
    						+ "SSBSECT.SSBSECT_SCHD_CODE,SSBSECT.SSBSECT_SCHD_CODE,SPRIDEN.SPRIDEN_ID, "
    						+ "SSBSECT.SSBSECT_SEQ_NUMB,SSBSECT.SSBSECT_CRN,  SIRASGN.SIRASGN_PRIMARY_IND " 
    						+ "from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN "
    						+ "where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM "
    						+ "and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE  "
    						+ "and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) "
    						//+ "and ( SSBSECT.SSBSECT_SCHD_CODE in ('T') "
    						+ "and (SSBSECT.SSBSECT_SEQ_NUMB = 'F01' "
    						+ "and SSBSECT.SSBSECT_GRADABLE_IND = 'Y' "
    						+ "and SPRIDEN.SPRIDEN_CHANGE_IND is null "
    						+ "and SIRASGN.SIRASGN_TERM_CODE IN (?,'201905')) "
    						+ "order by SPRIDEN.SPRIDEN_LAST_NAME, "
    						+ "SPRIDEN.SPRIDEN_FIRST_NAME, "
    						+ "SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID ";

    				TERM = 1;
    				SUBJ = 4;
    				CRSE = 5;
    				ID = 8;
    				SEQNO = 9;
    				CRN = 10;
    		        PRIMARY_IND = 11;
    		        
    				return enrol;

    }
    
	private String gatherLecturerEnrollmentsQuery() {

		String enrol = "select SIRASGN.SIRASGN_TERM_CODE, SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_LAST_NAME,SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB, "
				+ "SSBSECT.SSBSECT_SCHD_CODE,SSBSECT.SSBSECT_SCHD_CODE,SPRIDEN.SPRIDEN_ID, "
				+ "SSBSECT.SSBSECT_SEQ_NUMB,SSBSECT.SSBSECT_CRN,  SIRASGN.SIRASGN_PRIMARY_IND " 
				+ "from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN "
				+ "where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM "
				+ "and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE "
				+ "and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) "
				+ "and ( SSBSECT.SSBSECT_SCHD_CODE in ('L','R','W','K','P','T') "
				+ "and  SSBSECT.SSBSECT_SEQ_NUMB not in ('F01') "
				+ "and SSBSECT.SSBSECT_GRADABLE_IND = 'Y' "
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND is null "
				+ "and SIRASGN.SIRASGN_TERM_CODE IN (?,'201905')) "
				+ "order by SPRIDEN.SPRIDEN_LAST_NAME, "
				+ "SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID ";
		
		//20003216

		TERM = 1;
		SUBJ = 4;
		CRSE = 5;
		ID = 8;
		SEQNO = 9;
		CRN = 10;
        PRIMARY_IND = 11;
        
		return enrol;

	}

	private String gatherLecturerSpecificEnrollmentQuery() {

		String enrol = "select SIRASGN.SIRASGN_TERM_CODE, SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_LAST_NAME,SSBSECT.SSBSECT_SUBJ_CODE,SSBSECT.SSBSECT_CRSE_NUMB, "
				+ "SSBSECT.SSBSECT_SCHD_CODE,SSBSECT.SSBSECT_SCHD_CODE,SPRIDEN.SPRIDEN_ID, "
				+ "SSBSECT.SSBSECT_SEQ_NUMB,SSBSECT.SSBSECT_CRN , SIRASGN.SIRASGN_PRIMARY_IND "
				+ "from SATURN.SSBSECT SSBSECT, SATURN.SIRASGN SIRASGN, SATURN.SPRIDEN SPRIDEN "
				+ "where ( SPRIDEN.SPRIDEN_PIDM = SIRASGN.SIRASGN_PIDM "
				+ "and SIRASGN.SIRASGN_TERM_CODE = SSBSECT.SSBSECT_TERM_CODE "
				+ "and SIRASGN.SIRASGN_CRN = SSBSECT.SSBSECT_CRN ) "
				+ "and ( SSBSECT.SSBSECT_SCHD_CODE in ('L','R','W','K','P') "
				+ "and SPRIDEN.SPRIDEN_CHANGE_IND is null "
				+ "and SIRASGN.SIRASGN_TERM_CODE = ? AND SSBSECT_SUBJ_CODE = ? AND SSBSECT.SSBSECT_CRSE_NUMB = ? AND SSBSECT.SSBSECT_SEQ_NUMB = ?) "
				+ "order by SPRIDEN.SPRIDEN_LAST_NAME, "
				+ "SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SPRIDEN.SPRIDEN_MI, SPRIDEN.SPRIDEN_ID ";

		TERM = 1;
		SUBJ = 4;
		CRSE = 5;
		ID = 8;
		SEQNO = 9;
		CRN = 10;
        PRIMARY_IND = 11;
		
		return enrol;
	}

	private String gatherEnrollmentsByCourseQuery() {

		String sqlstmt = "SELECT DISTINCT AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY, AS_STUDENT_REGISTRATION_DETAIL.ID, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.LAST_NAME, AS_STUDENT_REGISTRATION_DETAIL.FIRST_NAME, TRANSCR.TRANSCR_YEAR, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_ID, AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_LAST_NAME, "
				+ "AS_STUDENT_REGISTRATION_DETAIL.INSTRUCTOR_FIRST_NAME, SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, "
				+ "SSBSECT.SSBSECT_CRN, SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, AS_STUDENT_REGISTRATION_DETAIL.RSTS_CODE AS RSTS_CODE, SSBSECT.SSBSECT_CRN "
				+ " FROM BANINST1.AS_STUDENT_REGISTRATION_DETAIL AS_STUDENT_REGISTRATION_DETAIL, "
				+ "SATURN.SCBCRSE SCBCRSE,SATURN.SSBSECT SSBSECT, SATURN.STVCOLL STVCOLL, SATURN.TRANSCR TRANSCR "
				+ "WHERE ( AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "  AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "  AND AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE "
				+ "  AND AS_STUDENT_REGISTRATION_DETAIL.CRN_KEY = SSBSECT.SSBSECT_CRN "
				+ "  AND STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE "
				+ "  AND TRANSCR.TRANSCR_PIDM = AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY ) "
				+ "AND ( AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY = ? "
				+ "      AND AS_STUDENT_REGISTRATION_DETAIL.SUBJ_CODE = ? "
				+ "      AND AS_STUDENT_REGISTRATION_DETAIL.COURSE_NUMBER = ? "
				+ " AND SSBSECT.SSBSECT_SCHD_CODE = ?  AND AS_STUDENT_REGISTRATION_DETAIL.ID = '98641288' "
				+ " AND ( AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY, AS_STUDENT_REGISTRATION_DETAIL.TERM_CODE_KEY )  = "
				+ " ( SELECT TRANSCR.TRANSCR_PIDM, "
				+ " MAX( TRANSCR.TRANSCR_TERM ) AS Max_TRANSCR_TERM "
				+ "FROM SATURN.TRANSCR TRANSCR "
				+ "WHERE TRANSCR.TRANSCR_PIDM = AS_STUDENT_REGISTRATION_DETAIL.PIDM_KEY "
				+ " GROUP BY TRANSCR.TRANSCR_PIDM ) "
				+ " AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ " ( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "    MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM "
				+ "FROM SATURN.SCBCRSE SCBCRSE1 "
				+ "WHERE SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ " GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE, "
				+ "SCBCRSE1.SCBCRSE_CRSE_NUMB ) )";
		return sqlstmt;

	}

	public String gatherCourseQuery() {
		String sqlstmt ="";
		/*
		 Concat(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, " +
                 "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,STVCOLL.STVCOLL_DESC AS COLL_DESC, " +
                 "SCBCRSE.SCBCRSE_TITLE,STVSUBJ.STVSUBJ_DESC AS SUBJ_DESC, SSBSECT_CRN AS CRN,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, " +
                 "SSBSECT.SSBSECT_TERM_CODE AS TERM_CODE,SSBSECT.SSBSECT_CRSE_TITLE AS CRSE_TITLE,SSBSECT.SSBSECT_CENSUS_ENRL_DATE AS ENRL_DATE, " +
                 "SCBCRSE.SCBCRSE_CSTA_CODE,SSBSECT.SSBSECT_SEQ_NUMB,SCBCRSE.SCBCRSE_EFF_TERM,SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,STVDEPT.STVDEPT_DESC AS DEPT_DESC  "+
		 * */
//		sqlstmt = "select distinct Concat(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, "
//				+ "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,STVCOLL.STVCOLL_DESC AS COLL_DESC, "
//				+ "SCBCRSE.SCBCRSE_TITLE,STVSUBJ.STVSUBJ_DESC AS SUBJ_DESC, SSBSECT_CRN AS CRN,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, "
//				+ "SSBSECT.SSBSECT_TERM_CODE AS TERM_CODE,SSBSECT.SSBSECT_CRSE_TITLE AS CRSE_TITLE,SSBSECT.SSBSECT_CENSUS_ENRL_DATE AS ENRL_DATE, "
//				+ "SCBCRSE.SCBCRSE_CSTA_CODE,SSBSECT.SSBSECT_SEQ_NUMB,SCBCRSE.SCBCRSE_EFF_TERM,SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,STVDEPT.STVDEPT_DESC AS DEPT_DESC, "
////				+ "SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1, STVMAJR.STVMAJR_DESC,CONCAT(SSBSECT.SSBSECT_SUBJ_CODE, SSBSECT.SSBSECT_CRSE_NUMB) as CourseCode "
//				+ "from SATURN.SCBCRSE SCBCRSE,SATURN.STVCOLL STVCOLL,SATURN.STVSUBJ STVSUBJ,SATURN.STVDEPT STVDEPT,SATURN.SSBSECT SSBSECT,  "
//				+ "SATURN.SGBSTDN SGBSTDN, BANINST1.AS_STUDENT_REGISTRATION_DETAIL STUDENT_DETAIL, SATURN.STVMAJR STVMAJR "
//				+ "where ( STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE "
//				+ "and STVSUBJ.STVSUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
//				+ "and STVDEPT.STVDEPT_CODE = SCBCRSE.SCBCRSE_DEPT_CODE "
//				+"and SGBSTDN.SGBSTDN_TERM_CODE_EFF = SSBSECT.SSBSECT_TERM_CODE "
//                + "and STUDENT_DETAIL.CRN_KEY = SSBSECT.SSBSECT_CRN "
//                + "and  SGBSTDN.SGBSTDN_PIDM = STUDENT_DETAIL.PIDM_KEY "
//                + "and STVMAJR.STVMAJR_CODE(+) = SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1 "
//                + "and STUDENT_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE "
//				+ "and SSBSECT.SSBSECT_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
//				+ "and SSBSECT.SSBSECT_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
//				+ "and ( SSBSECT.SSBSECT_TERM_CODE in (?) and SCBCRSE.SCBCRSE_CSTA_CODE = ? "
//				+ "and SSBSECT.SSBSECT_SCHD_CODE IN (?,?,?,?,?)  " 
////				+"and SSBSECT.SSBSECT_SUBJ_CODE = 'PHYS' "
////				+"and  SSBSECT.SSBSECT_CRSE_NUMB = 1205 "
////				+ " and SGBSTDN.SGBSTDN_CAMP_CODE = 'I' "
//				+ "and ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
//				+ "( select SCBCRSE1.SCBCRSE_SUBJ_CODE, "
//				+ "SCBCRSE1.SCBCRSE_CRSE_NUMB, "
//				+ "Max( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM "
//				+ "from SATURN.SCBCRSE SCBCRSE1 where SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
//				+ "and SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB group by SCBCRSE1.SCBCRSE_SUBJ_CODE, "
//				+ "SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) order by SCBCRSE.SCBCRSE_SUBJ_CODE, "
//				+ "SCBCRSE.SCBCRSE_CRSE_NUMB, " + "STVCOLL.STVCOLL_DESC ";
//		
		
		/* select distinct Concat(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, 
                 SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,STVCOLL.STVCOLL_DESC AS COLL_DESC, 
                 SCBCRSE.SCBCRSE_TITLE,STVSUBJ.STVSUBJ_DESC AS SUBJ_DESC, SSBSECT_CRN AS CRN,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, 
                 SSBSECT.SSBSECT_TERM_CODE AS TERM_CODE,SSBSECT.SSBSECT_CRSE_TITLE AS CRSE_TITLE,SSBSECT.SSBSECT_CENSUS_ENRL_DATE AS ENRL_DATE, 
                 SCBCRSE.SCBCRSE_CSTA_CODE,SSBSECT.SSBSECT_SEQ_NUMB,SCBCRSE.SCBCRSE_EFF_TERM,SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,STVDEPT.STVDEPT_DESC AS DEPT_DESC 
                 from SATURN.SCBCRSE SCBCRSE,SATURN.STVCOLL STVCOLL,SATURN.STVSUBJ STVSUBJ,SATURN.STVDEPT STVDEPT,SATURN.SSBSECT SSBSECT 
                 where ( STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE 
                 and STVSUBJ.STVSUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE 
                 and STVDEPT.STVDEPT_CODE = SCBCRSE.SCBCRSE_DEPT_CODE 
                 and SSBSECT.SSBSECT_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE 
                 and SSBSECT.SSBSECT_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB ) 
                 and ( SSBSECT.SSBSECT_TERM_CODE in ('202010') and SCBCRSE.SCBCRSE_CSTA_CODE = 'A'  and SCBCRSE.SCBCRSE_SUBJ_CODE = 'METE' AND SCBCRSE.SCBCRSE_CRSE_NUMB = '3420'
                 and SSBSECT.SSBSECT_SCHD_CODE IN ('R','P','L','W','K') 
                 and ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = 
                 ( select SCBCRSE1.SCBCRSE_SUBJ_CODE, 
                 SCBCRSE1.SCBCRSE_CRSE_NUMB, 
                 Max( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM 
                 from SATURN.SCBCRSE SCBCRSE1 where SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE 
                 and SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB group by SCBCRSE1.SCBCRSE_SUBJ_CODE, 
                 SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) order by SCBCRSE.SCBCRSE_SUBJ_CODE, 
                 SCBCRSE.SCBCRSE_CRSE_NUMB,   STVCOLL.STVCOLL_DESC ;*/

//Original	
//		      sqlstmt=  "select distinct Concat(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, " +
//                 "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,STVCOLL.STVCOLL_DESC AS COLL_DESC, " +
//                 "SCBCRSE.SCBCRSE_TITLE,STVSUBJ.STVSUBJ_DESC AS SUBJ_DESC, SSBSECT_CRN AS CRN,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, " +
//                 "SSBSECT.SSBSECT_TERM_CODE AS TERM_CODE,SSBSECT.SSBSECT_CRSE_TITLE AS CRSE_TITLE,SSBSECT.SSBSECT_CENSUS_ENRL_DATE AS ENRL_DATE, " +
//                 "SCBCRSE.SCBCRSE_CSTA_CODE,SSBSECT.SSBSECT_SEQ_NUMB,SCBCRSE.SCBCRSE_EFF_TERM,SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,STVDEPT.STVDEPT_DESC AS DEPT_DESC  "+
//                "from SATURN.SCBCRSE SCBCRSE,SATURN.STVCOLL STVCOLL,SATURN.STVSUBJ STVSUBJ,SATURN.STVDEPT STVDEPT,SATURN.SSBSECT SSBSECT " +
//                 "where ( STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE " +
//                 "and STVSUBJ.STVSUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE " +
//                 "and STVDEPT.STVDEPT_CODE = SCBCRSE.SCBCRSE_DEPT_CODE " +
//                 "and SSBSECT.SSBSECT_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE " +
//                 "and SSBSECT.SSBSECT_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB )  " +
//                 "and ( SSBSECT.SSBSECT_TERM_CODE in (?) and SCBCRSE.SCBCRSE_CSTA_CODE = ? " + 
//                 "and SSBSECT.SSBSECT_SCHD_CODE IN (?,?,?,?,?)  " +
//                 "and ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "+
//                 "( select SCBCRSE1.SCBCRSE_SUBJ_CODE, " +
//                 "SCBCRSE1.SCBCRSE_CRSE_NUMB,  " +
//                 "Max( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM " +
//                 "from SATURN.SCBCRSE SCBCRSE1 where SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE  " +
//                 "and SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB group by SCBCRSE1.SCBCRSE_SUBJ_CODE, " +
//                 "SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) order by SCBCRSE.SCBCRSE_SUBJ_CODE, " +
//                 "SCBCRSE.SCBCRSE_CRSE_NUMB,   STVCOLL.STVCOLL_DESC" ;

		
		 sqlstmt = "select distinct Concat(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) AS COURSE_CODE, SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1 CONC_CODE," +
         "STVMAJR.STVMAJR_DESC AS CONC_DESC," +
          "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,STVCOLL.STVCOLL_DESC AS COLL_DESC, " +
          "SCBCRSE.SCBCRSE_TITLE AS CRS_TITLE,STVSUBJ.STVSUBJ_DESC AS SUBJ_DESC, SSBSECT_CRN AS CRN,SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB, " +
          "SSBSECT.SSBSECT_TERM_CODE AS TERM_CODE,SSBSECT.SSBSECT_CRSE_TITLE AS CRSE_TITLE,SSBSECT.SSBSECT_CENSUS_ENRL_DATE AS ENRL_DATE, " +
          "SCBCRSE.SCBCRSE_CSTA_CODE,SSBSECT.SSBSECT_SEQ_NUMB,SCBCRSE.SCBCRSE_EFF_TERM,SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE,STVDEPT.STVDEPT_DESC AS DEPT_DESC " +
          "from SATURN.SCBCRSE SCBCRSE,SATURN.STVCOLL STVCOLL,SATURN.STVSUBJ STVSUBJ,SATURN.STVDEPT STVDEPT,SATURN.SSBSECT SSBSECT, " +
         "SATURN.SGBSTDN SGBSTDN, BANINST1.AS_STUDENT_REGISTRATION_DETAIL STUDENT_DETAIL, SATURN.STVMAJR STVMAJR  "  +
          "where ( STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE " +
          "and STVSUBJ.STVSUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE  " +
          "and STVDEPT.STVDEPT_CODE = SCBCRSE.SCBCRSE_DEPT_CODE " +
         "and SGBSTDN.SGBSTDN_TERM_CODE_EFF = SSBSECT.SSBSECT_TERM_CODE " +
         "and STUDENT_DETAIL.CRN_KEY = SSBSECT.SSBSECT_CRN " +
         "and  SGBSTDN.SGBSTDN_PIDM = STUDENT_DETAIL.PIDM_KEY " +
         "and STVMAJR.STVMAJR_CODE(+) = SGBSTDN.SGBSTDN_MAJR_CODE_CONC_1 " +
         "and STUDENT_DETAIL.TERM_CODE_KEY = SSBSECT.SSBSECT_TERM_CODE " +
          "and SSBSECT.SSBSECT_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE " +
          "and SSBSECT.SSBSECT_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB )  " +
          "and ( SSBSECT.SSBSECT_TERM_CODE in (?) and SCBCRSE.SCBCRSE_CSTA_CODE = ?  and SCBCRSE.SCBCRSE_SUBJ_CODE = 'EDRS' and SCBCRSE.SCBCRSE_CRSE_NUMB = 6910 " +
          "and SSBSECT.SSBSECT_SCHD_CODE IN (?,?,?,?,?) " +
          "and ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  =  " +
          "( select SCBCRSE1.SCBCRSE_SUBJ_CODE, " +
          "SCBCRSE1.SCBCRSE_CRSE_NUMB, " +
          "Max( SCBCRSE1.SCBCRSE_EFF_TERM ) AS Max_SCBCRSE_EFF_TERM " +
          "from SATURN.SCBCRSE SCBCRSE1 where SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE " +
          "and SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB group by SCBCRSE1.SCBCRSE_SUBJ_CODE, " +
          "SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) order by SCBCRSE.SCBCRSE_SUBJ_CODE, " +
          "SCBCRSE.SCBCRSE_CRSE_NUMB,   STVCOLL.STVCOLL_DESC ";

		return sqlstmt;

	}

	public String gatherSpecificCourseQuery() {

		String sqlstmt = "SELECT DISTINCT CONCAT(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB) as COURSE_CODE,"
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE AS SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB AS CRSE_NUMB,STVCOLL.STVCOLL_DESC AS COLL_DESC,SCBCRSE.SCBCRSE_TITLE,STVSUBJ.STVSUBJ_DESC AS SUBJ_DESC,SSBSECT.SSBSECT_CRN AS CRN, "
				+ "SSBSECT.SSBSECT_SEQ_NUMB AS SEQ_NUMB,SSBSECT.SSBSECT_TERM_CODE AS TERM_CODE,SSBSECT.SSBSECT_CRSE_TITLE AS CRSE_TITLE,SSBSECT.SSBSECT_CENSUS_ENRL_DATE AS ENRL_DATE,SCBCRSE.SCBCRSE_CSTA_CODE,SSBSECT.SSBSECT_SEQ_NUMB , "
				+ "SCBCRSE.SCBCRSE_EFF_TERM AS EFF_TERM,SSBSECT.SSBSECT_SCHD_CODE AS SCHD_CODE, STVDEPT.STVDEPT_DESC AS DEPT_DESC "
				+ "FROM SATURN.SCBCRSE SCBCRSE,SATURN.STVCOLL STVCOLL,SATURN.STVSUBJ STVSUBJ,SATURN.SSBSECT SSBSECT,SATURN.SIRASGN SIRASGN,SATURN.STVDEPT STVDEPT "
				+ "WHERE ( STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE AND STVSUBJ.STVSUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "AND SCBCRSE.SCBCRSE_SUBJ_CODE = SSBSECT.SSBSECT_SUBJ_CODE AND SCBCRSE.SCBCRSE_CRSE_NUMB = SSBSECT.SSBSECT_CRSE_NUMB "
				+ "AND SSBSECT.SSBSECT_TERM_CODE = SIRASGN.SIRASGN_TERM_CODE (+) AND SSBSECT.SSBSECT_CRN = SIRASGN.SIRASGN_CRN (+) AND STVDEPT.STVDEPT_CODE = SCBCRSE.SCBCRSE_DEPT_CODE) "
				+ "AND ( SSBSECT.SSBSECT_TERM_CODE = ? AND SCBCRSE.SCBCRSE_CSTA_CODE = ? AND SSBSECT.SSBSECT_SCHD_CODE in (?,?,?,?,?) AND SCBCRSE.SCBCRSE_SUBJ_CODE = ? AND SCBCRSE.SCBCRSE_CRSE_NUMB = ? "
				+ "AND ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "( SELECT SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "MAX( SCBCRSE1.SCBCRSE_EFF_TERM ) as  Max_SCBCRSE_EFF_TERM "
				+ "FROM SATURN.SCBCRSE SCBCRSE1 WHERE(SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE) "
				+ "AND SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "GROUP BY SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) "
				+ "ORDER BY SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, STVCOLL.STVCOLL_DESC";

		return sqlstmt;

	}
	public String gatherExamShellsQuery() {


		String sqlstmt = "select distinct Concat(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB)  as ShortName,"
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, STVCOLL.STVCOLL_DESC, SCBCRSE.SCBCRSE_EFF_TERM, SCBCRSE.SCBCRSE_TITLE, "
				+ "STVSUBJ.STVSUBJ_DESC, STVDEPT.STVDEPT_DESC, SSBSECT.SSBSECT_TERM_CODE, "
//				+ "SSBSECT.SSBSECT_CRN AS CRN, "
//				+ "SSBSECT.SSBSECT_SEQ_NUMB  as SEQ_NUMB,"
				+ "SSBSECT_CAMP_CODE  "
				+ "from SATURN.SCBCRSE SCBCRSE, SATURN.STVCOLL STVCOLL, SATURN.STVSUBJ STVSUBJ, SATURN.STVDEPT STVDEPT, SATURN.SSBSECT SSBSECT "
				+ "where ( STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE "
				+ "and STVSUBJ.STVSUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and STVDEPT.STVDEPT_CODE = SCBCRSE.SCBCRSE_DEPT_CODE "
				+ "and SSBSECT.SSBSECT_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and SSBSECT.SSBSECT_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
				+ "and ( SSBSECT.SSBSECT_TERM_CODE = ? "
				+ "and SCBCRSE.SCBCRSE_CSTA_CODE = ? "
				+"and SCBCRSE.SCBCRSE_SUBJ_CODE =  'PSYC' "
				+"and SCBCRSE.SCBCRSE_CRSE_NUMB = 3018 "
				+"and SSBSECT.SSBSECT_CAMP_CODE IN ('C') "
//				+ "and SSBSECT.SSBSECT_CRN = '12705' "
				+ "and SSBSECT.SSBSECT_SCHD_CODE IN (?,?,?,?,?) "
				//+ "and  (INSTR(SSBSECT.SSBSECT_SEQ_NUMB,?)  > 0 OR SSBSECT.SSBSECT_SEQ_NUMB =  ?) " 
				+ "and ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "(select SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "Max( SCBCRSE1.SCBCRSE_EFF_TERM )  as Max_SCBCRSE_EFF_TERM "
				+ "from SATURN.SCBCRSE SCBCRSE1 "
				+ "where SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "group by SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) "
				+ "order by SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, STVCOLL.STVCOLL_DESC ";

		return sqlstmt;
	}
	public String gatherMetaCourseQuery() {


		String sqlstmt = "select distinct Concat(SCBCRSE.SCBCRSE_SUBJ_CODE,SCBCRSE.SCBCRSE_CRSE_NUMB)  as ShortName,"
				+ "SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, STVCOLL.STVCOLL_DESC, SCBCRSE.SCBCRSE_EFF_TERM, SCBCRSE.SCBCRSE_TITLE, "
				+ "STVSUBJ.STVSUBJ_DESC, STVDEPT.STVDEPT_DESC, SSBSECT.SSBSECT_TERM_CODE "
				+ "from SATURN.SCBCRSE SCBCRSE, SATURN.STVCOLL STVCOLL, SATURN.STVSUBJ STVSUBJ, SATURN.STVDEPT STVDEPT, SATURN.SSBSECT SSBSECT "
				+ "where ( STVCOLL.STVCOLL_CODE = SCBCRSE.SCBCRSE_COLL_CODE "
				+ "and STVSUBJ.STVSUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and STVDEPT.STVDEPT_CODE = SCBCRSE.SCBCRSE_DEPT_CODE "
				+ "and SSBSECT.SSBSECT_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and SSBSECT.SSBSECT_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB ) "
				+ "and ( SSBSECT.SSBSECT_TERM_CODE = ? "
				+ "and SCBCRSE.SCBCRSE_CSTA_CODE = ? "
				+ "and SSBSECT.SSBSECT_SCHD_CODE IN (?,?,?) "
				+ "and  (INSTR(SSBSECT.SSBSECT_SEQ_NUMB,?)  > 0 OR SSBSECT.SSBSECT_SEQ_NUMB =  ?) " 
				+ "and ( SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, SCBCRSE.SCBCRSE_EFF_TERM )  = "
				+ "(select SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB, "
				+ "Max( SCBCRSE1.SCBCRSE_EFF_TERM )  as Max_SCBCRSE_EFF_TERM "
				+ "from SATURN.SCBCRSE SCBCRSE1 "
				+ "where SCBCRSE1.SCBCRSE_SUBJ_CODE = SCBCRSE.SCBCRSE_SUBJ_CODE "
				+ "and SCBCRSE1.SCBCRSE_CRSE_NUMB = SCBCRSE.SCBCRSE_CRSE_NUMB "
				+ "group by SCBCRSE1.SCBCRSE_SUBJ_CODE, SCBCRSE1.SCBCRSE_CRSE_NUMB ) ) "
				+ "order by SCBCRSE.SCBCRSE_SUBJ_CODE, SCBCRSE.SCBCRSE_CRSE_NUMB, STVCOLL.STVCOLL_DESC ";

		return sqlstmt;
	}

	public String getNarrativeQuery() {

		String sqlstmt = "SELECT SCBDESC.SCBDESC_SUBJ_CODE, SCBDESC.SCBDESC_CRSE_NUMB, SCBDESC.SCBDESC_TERM_CODE_EFF, "
				+ "SCBDESC.SCBDESC_TEXT_NARRATIVE AS TEXT_NARRATIVE, SCBDESC.SCBDESC_SUBJ_CODE, SCBDESC.SCBDESC_CRSE_NUMB "
				+ "FROM SCBDESC WHERE (((SCBDESC.SCBDESC_TERM_CODE_EFF)=(SELECT MAX(A.SCBDESC_TERM_CODE_EFF) "
				+ "AS MAX_TERM FROM SCBDESC A  WHERE A.SCBDESC_CRSE_NUMB = SCBDESC.SCBDESC_CRSE_NUMB AND A.SCBDESC_SUBJ_CODE = "
				+ "SCBDESC.SCBDESC_SUBJ_CODE)) AND ((SCBDESC.SCBDESC_SUBJ_CODE)= ?) AND ((SCBDESC.SCBDESC_CRSE_NUMB)= ?))";

		return sqlstmt;
	}

	public boolean OnHold(String id) {

		
       //413001682
		boolean found = false;

		DteFormatter df = new DteFormatter();

		PreparedStatement prepStmt = null;

		try {
			prepStmt = conn.prepareStatement(studentHoldQuery());
			prepStmt.setString(1, "BU");
			prepStmt.setString(2, "2099-12-31");
			prepStmt.setString(3, "AS");
			prepStmt.setString(4, "2099-12-31");
			
			prepStmt.setString(5, id);
			
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {
				found = true;
			}

			rs.close();
			prepStmt.close();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}

		return found;

	}
	
	public String gatherNarrative(String subjCode, String crseNumb) {

		String narrative = null;

		PreparedStatement prepStmt = null;

		try {
			prepStmt = conn.prepareStatement(getNarrativeQuery());
			prepStmt.setString(1, subjCode);
			prepStmt.setString(2, crseNumb);

			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				try {
					if (rs.getAsciiStream(4) != null) {
						BufferedReader br = new BufferedReader(
								new InputStreamReader(rs.getAsciiStream(4)));
						narrative = br.readLine();
						br.close();
					} else {
						narrative = "";
					}

				} catch (IOException ex) {
					ex.printStackTrace();
				}

			}

			rs.close();
			prepStmt.close();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return narrative;
	}

	
	public ArrayList gatherCourse(String semester) {
		ArrayList aList = new ArrayList();
		PreparedStatement prepStmt = null;
		MoodleObjects mo = (MoodleObjects) hmap.get("course");

		try {

			
			
			if (!this.upload) {
				prepStmt = conn.prepareStatement(gatherCourseQuery());
			} else {
				prepStmt = conn.prepareStatement(gatherSpecificCourseQuery());
			}

			if (!mo.getOverride()) {
				if (semester == "") {
				  // prepStmt.setString(1, getCurrentTerm());
				}
				else 
					prepStmt.setString(1, semester);
			} else {
				if (semester != "")
				   prepStmt.setString(1, semester);
				else 
					prepStmt.setString(1, mo.getSemester());
			}
			
			prepStmt.setString(1, "202020");
			prepStmt.setString(2, "A");
			prepStmt.setString(3, "R");
			prepStmt.setString(4, "P");
			prepStmt.setString(5, "L");
			prepStmt.setString(6, "W");
			prepStmt.setString(7, "K");

			if (this.upload) {
				prepStmt.setString(8, this.crseCode);
				prepStmt.setString(9, this.crseNumb);

			}
			MessageLogger.out.println("Processing...");
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				
					Course course = new Course();
                    /*
                     * course.setCollDesc(rs.getString(4));
					course.setCrseNumb(rs.getString(3));
					course.setCrseTitle(rs.getString(6));
					course.setDeptDesc(rs.getString(8));
					course.setSubjCode(rs.getString(2));
					course.setTermCode(term);
	                Resits resits = resitList.get(rs.getString("ShortName"));
	                course.setStartDate(resits.getResitDate());
                     * */
					
					course.setCollDesc(rs.getString("COLL_DESC"));
					course.setCrn(rs.getString("CRN"));
					course.setCrseNumb(rs.getString("CRSE_NUMB"));
					course.setCrseTitle(rs.getString("CRS_TITLE").replace(",", " "));
					if (course.getCrseTitle().indexOf("Testing")>=0) {
						System.out.println(course.getCrseTitle());
					}
					course.setDeptDesc(rs.getString("DEPT_DESC"));
					course.setSeqNumb(rs.getString("SEQ_NUMB"));
					course.setSubjCode(rs.getString("SUBJ_CODE"));
					course.setTermCode("202020");
					if (rs.getString("CONC_CODE") != null) {
						course.setConcCode(rs.getString("CONC_CODE"));
						course.setConcName(rs.getString("CONC_DESC").replace(",", " "));
						course.setHasConc(true);
					} else {
						course.setHasConc(false);
					}
//					course.setHasConc(false);
					// if (!mo.getOverride()){
					// course.setAction("delete");
					// } else {
					course.setAction(mo.getAction());
					// }
					// System.out.println(mo.getAction());

					aList.add(course);
				
			}
			rs.close();
			prepStmt.close();
            MessageLogger.out.println("All courses gathered...");
		} catch (SQLException ex) {
			ex.printStackTrace();
			System.out.println(ex.getMessage());
		}
		return aList;
	}
    public ArrayList<Course> getNonAcademicCourse() {
    	
    	ArrayList<Course> list = new ArrayList<Course>();
    	Course course = new Course();
		course.setCollDesc("STUDENT ORIENTATION");
		course.setCrn("00000");
		course.setCrseNumb("2021");
		course.setCrseTitle("CHILL New Student Orientation");
		course.setDeptDesc("CHILL");
		course.setSeqNumb("00");
		course.setSubjCode("ORNT");
		course.setTermCode("202020");

		course.setAction("create");

		list.add(course);
	
      return list;
    }
	public ArrayList gatherMetaCourse() {
		ArrayList aList = new ArrayList();
		PreparedStatement prepStmt = null;
		String term = "";

		MoodleObjects mo = (MoodleObjects) hmap.get("course");

		if (mo.getOverride()) {
			term = mo.getSemester();
		} else {
			term = getCurrentTerm();
		}

		try {
           /*
            * + "and ( SSBSECT.SSBSECT_TERM_CODE = ? "
				+ "and SCBCRSE.SCBCRSE_CSTA_CODE = ? "
				+ "and SSBSECT.SSBSECT_SCHD_CODE IN (?,?,?) "
				+ "and  (INSTR(SSBSECT.SSBSECT_SEQ_NUMB,?)  > 0 OR SSBSECT.SSBSECT_SEQ_NUMB =  ?)
            * */
			prepStmt = conn.prepareStatement(gatherMetaCourseQuery());
			prepStmt.setString(1, term);
			prepStmt.setString(2, "A");
			prepStmt.setString(3, "L");
			prepStmt.setString(4, "R");
			prepStmt.setString(5, "P");
			prepStmt.setString(6, "02");
			prepStmt.setString(7, "L1");
			
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				Course course = new Course();
				course.setCollDesc(rs.getString(4));
				course.setCrseNumb(rs.getString(3));
				course.setCrseTitle(rs.getString(6));
				course.setDeptDesc(rs.getString(8));
				course.setSubjCode(rs.getString(2));
				course.setTermCode(term);

				course.setAction("create");

				aList.add(course);
			}

			rs.close();
			prepStmt.close();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return aList;
	}
	public ArrayList gatherExamShells(String semester) {
		ArrayList aList = new ArrayList();
		PreparedStatement prepStmt = null;
		String term = "";

		MoodleObjects mo = (MoodleObjects) hmap.get("course");

		if (mo.getOverride()) {
			term = mo.getSemester();
		} else {
			term = getCurrentTerm();
		}
       term = semester;
		try {
           //term = "201920";
			prepStmt = conn.prepareStatement(gatherExamShellsQuery());
			prepStmt.setString(1, term);
			prepStmt.setString(2, "A");
			prepStmt.setString(3, "L");
			prepStmt.setString(4, "R");
			prepStmt.setString(5, "P");
			prepStmt.setString(6, "S");
			prepStmt.setString(7, "K");
			
			HashMap<String,Resits> resitList = ExcelCourse.usingDataInputStreamResits();		
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				//if (resitList.containsKey(rs.getString("ShortName"))) {				
					Course course = new Course();
					course.setCollDesc(rs.getString(4));
					course.setCrseNumb(rs.getString(3));
					course.setCrseTitle(rs.getString(6) + " - Exams");
				    
//					course.setSeqNumb(rs.getString("SEQ_NUMB"));
					course.setDeptDesc(rs.getString("STVDEPT_DESC"));
					course.setSubjCode(rs.getString("SCBCRSE_SUBJ_CODE"));
					course.setTermCode(term);
					course.setCampCode(rs.getString("SSBSECT_CAMP_CODE"));
//					course.setCrn(rs.getString("CRN"));
	                Resits resits = resitList.get(rs.getString("ShortName"));
	                //course.setStartDate(resits.getResitDate());
	                
					course.setAction("create");
	
					aList.add(course);
				//}
			}

			rs.close();
			prepStmt.close();

		} catch (SQLException | IOException ex) {
			ex.printStackTrace();
		}
		return aList;
	}

	public boolean crnFound(String crn, String id) {

		boolean found = false;
		try {
			PreparedStatement prepStmt = conn.prepareStatement(locateCRN());

			prepStmt.setString(1, "L");
			prepStmt.setString(2, "R");
			prepStmt.setString(3, "P");
			prepStmt.setString(4, "W");

			prepStmt.setString(5, getCurrentTerm());
			prepStmt.setString(6, crn);
			prepStmt.setString(7, id);

			ResultSet rs = prepStmt.executeQuery();

			if (rs.next()) {
				found = true;
				return found;
			}

			rs.close();
			prepStmt.close();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return found;
	}
    public void dropLecturerEnrollments() {
    	DocumentBuilder builder = null;
		XMLBuilder build = new XMLBuilder(builder);
		
        MoodleObjects obj = (MoodleObjects)hmap.get("drop");
		
		String term = "";
		if (obj.getOverride()){
		   term = obj.getSemester();
		} else {
			term = getCurrentTerm();
		}
	
		try {
			PreparedStatement prepStmt = conn
					.prepareStatement( dropLecturers() );
			prepStmt.setString(1, term);
		
			ResultSet rs = prepStmt.executeQuery();

			StudentCourseDrops uib = new StudentCourseDrops();
			uib.setCurrentTerm(term);

			while (rs.next()) {

				build.initializeRoot();
				uib.setXMLBuilder(build);

				uib.setDocCreated(false);

				StudentEnrol stuEnrol = new StudentEnrol();
				//stuEnrol.setId(rs.getString(8));
				stuEnrol.setId("10030558");
				if (stuEnrol.getId() != null) {

					uib.getUser(stuEnrol.getId());

					if (uib.userFound()) {
                        
						
						/*Gets Courses from conduit*/
						uib.accessEnrollments(stuEnrol.getId());
                        
                        /*gathers student courses*/
						uib.convertXMLString("lecturer");
					
					}
				}
				if (uib.docCreated())
					build.appendRoot();
                String s = "";
				ArrayList moodleList = null;
				moodleList = uib.getMoodleCourseList();
				if (moodleList != null) {
					this.setIdFlag(true);
					/*gathers course list from banner*/
					ArrayList bannerList = gatherLecturerForDrop(stuEnrol.getId());
					Iterator moodleIterator = moodleList.iterator();
					while (moodleIterator.hasNext()) {
						boolean found = false;
						StudentEnrol moodleStudent = (StudentEnrol) moodleIterator
								.next();
						Iterator bannerIterator = bannerList.iterator();
						/*iterate banner list and if course is found in  banner, do not set for deletion*/
						while (bannerIterator.hasNext()) {
							StudentEnrol BannerStudent = (StudentEnrol) bannerIterator
									.next();
							String crseCode = BannerStudent.getTermCode()
									+ BannerStudent.getSubjCode()
									+ BannerStudent.getCrseCode() + "-" +BannerStudent.getSeqNumb();
									//+ "L01";
							if (crseCode.trim().equals(
									moodleStudent.getCrseCode().trim())) {
								found = true;

							}
						}
						/* send to drop */
						if (!found) {
							build.initializeRoot();
							build.createDocument(moodleStudent.getId(),
									moodleStudent.getCrseCode().trim(),"lecturer");
							build.appendRoot();
						}

					}
					uib.resetMoodleCourseList();
				}
			
			}
		 
    
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
    	
    }
	public void dropEnrollments() {

		DocumentBuilder builder = null;
		XMLBuilder build = new XMLBuilder(builder);
		
        MoodleObjects obj = (MoodleObjects)hmap.get("drop");
		
		String term = "";
		if (obj.getOverride()){
		   term = obj.getSemester();
		} else {
			term = getCurrentTerm();
		}
		//term = "201910";
		//gatherStudentUserQuery() gatherStudentUserQueryTest() gatheMoodleDropQuery()
		//gatherLecturerEnrollmentsQuery()  gatheMoodleDropQuery gatherLecturerEnrollmentsQuery
		

		//gatherStudentUserQueryTest() gatherLecturerEnrollmentsQuery()
		try {
			PreparedStatement prepStmt = conn
					.prepareStatement( gatheMoodleDropQuery() );
			prepStmt.setString(1, term);
		    
			String[] range = termRange(term);
			
			prepStmt.setString(2, range[0]);
			prepStmt.setString(3, range[1]);
			prepStmt.setString(4, "CA");
              
			ResultSet rs = prepStmt.executeQuery();

			StudentCourseDrops uib = new StudentCourseDrops();
			uib.setCurrentTerm(term);

			while (rs.next()) {

				build.initializeRoot();
				uib.setXMLBuilder(build);

				uib.setDocCreated(false);

				StudentEnrol stuEnrol = new StudentEnrol();
				//stuEnrol.setId(rs.getString(1));
				stuEnrol.setId("10030558");
				if (stuEnrol.getId() != null) {

					uib.getUser(stuEnrol.getId());

					if (uib.userFound()) {
                        
						
						/*Gets Courses from conduit*/
						uib.accessEnrollments(stuEnrol.getId());
                        String levl = rs.getString(7);
                        
						if (levl.equals("UG")) {
                            /*gathers student courses*/
							uib.convertXMLString("student");
						//}
					}
				}
				if (uib.docCreated())
					build.appendRoot();
                String s = "";
				ArrayList moodleList = null;
				moodleList = uib.getMoodleCourseList();
				if (moodleList != null) {
					this.setIdFlag(true);
					/*gathers course list from banner*/
					ArrayList bannerList = gatherEnrollmentsForDrop(stuEnrol.getId());
					Iterator moodleIterator = moodleList.iterator();
					while (moodleIterator.hasNext()) {
						boolean found = false;
						StudentEnrol moodleStudent = (StudentEnrol) moodleIterator
								.next();
						Iterator bannerIterator = bannerList.iterator();
						/*iterate banner list and if course is found in  banner, do not set for deletion*/
						while (bannerIterator.hasNext()) {
							StudentEnrol BannerStudent = (StudentEnrol) bannerIterator
									.next();
							String crseCode = BannerStudent.getTermCode()
									+ BannerStudent.getSubjCode()
									+ BannerStudent.getCrseCode() + "-"
									+ BannerStudent.getSeqNumb();
							if (crseCode.trim().equals(
									moodleStudent.getCrseCode().trim())) {
								found = true;

							}
						}
						/* send to drop */
						if (!found) {
							build.initializeRoot();
							build.createDocument(moodleStudent.getId(),
									moodleStudent.getCrseCode().trim(),"student");
							build.appendRoot();
						}

					}
					uib.resetMoodleCourseList();
				}

			}
		 }
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
    public ArrayList gatherLecturerForDrop(String id) {
    	ArrayList aList = new ArrayList();
		PreparedStatement prepStmt = null;
		
		MoodleObjects obj = (MoodleObjects)hmap.get("drop");
		
		String term = "";
		if (obj.getOverride()){
		   term = obj.getSemester();
		} else {
			term = getCurrentTerm();
		}
		
		try {
			prepStmt = conn.prepareStatement(gatherLecturerByID());

			prepStmt.setString(1, term);
			
			prepStmt.setString(2, id);
            
			ResultSet rs = prepStmt.executeQuery();

			while (rs.next()) {
				StudentEnrol stuEnrol = new StudentEnrol();
				stuEnrol.setTermCode(term);
				stuEnrol.setSubjCode(rs.getString(4));
				stuEnrol.setCrseCode(rs.getString(5));
				stuEnrol.setId(id);
				stuEnrol.setCrn(rs.getString(10));
				stuEnrol.setSeqNumb(rs.getString(9));

				aList.add(stuEnrol);

			}

			rs.close();
			prepStmt.close();
			MessageLogger.out
					.println("Start...End of gatherEnrollmentsForDrop");

			return aList;

		} catch (SQLException ex) {

		}
		return null;
    	
    }
	public ArrayList gatherEnrollmentsForDrop(String id) {
		ArrayList aList = new ArrayList();
		PreparedStatement prepStmt = null;
		
		MoodleObjects obj = (MoodleObjects)hmap.get("drop");
		
		String term = "";
		if (obj.getOverride()){
		   term = obj.getSemester();
		} else {
			term = getCurrentTerm();
		}
		
		try {
			prepStmt = conn.prepareStatement(gatherEnrollmentsByIDQuery());

			prepStmt.setString(1, "L");
			prepStmt.setString(2, "R");
			prepStmt.setString(3, "P");
			prepStmt.setString(4, "W");
			prepStmt.setString(5, term);
			prepStmt.setString(6, id);

			ResultSet rs = prepStmt.executeQuery();

			while (rs.next()) {
				StudentEnrol stuEnrol = new StudentEnrol();
				stuEnrol.setTermCode(rs.getString(1));
				stuEnrol.setSubjCode(rs.getString(5));
				stuEnrol.setCrseCode(rs.getString(6));
				stuEnrol.setId(rs.getString(7));
				stuEnrol.setCrn(rs.getString(14));
				stuEnrol.setSeqNumb(rs.getString(11));

				aList.add(stuEnrol);

			}

			rs.close();
			prepStmt.close();
			MessageLogger.out
					.println("Start...End of gatherEnrollmentsForDrop");

			return aList;

		} catch (SQLException ex) {

		}
		return null;
	}
	public HashMap<String, ExcelEnrol> nonAcademicEnrollment(){
		HashMap<String, ExcelEnrol>  aList = new HashMap<String, ExcelEnrol> ();
		PreparedStatement prepStmt = null;
		hdrCnt=0;
		tempCnt =0;
		try {
			//eThinkEnrollmentsQRY()
			//gatherlecturerEnrollmentExamsQuery()
			prepStmt = conn.prepareStatement(eThinkEnrollmentsQRY());
			prepStmt.setString(1,"202110");
			ResultSet rs = prepStmt.executeQuery();
			ExcelEnrol temp = new ExcelEnrol();
				
			while (rs.next()) {

				//if (resitList.containsKey(course_code)) {
					if (!aList.containsKey(rs.getString(1))) {

						if (tempCnt > hdrCnt) {
							hdrCnt = tempCnt;
						}
						tempCnt = 0;

						ExcelEnrol excelEnrol = new ExcelEnrol();
						excelEnrol.setUsername(rs.getString(1));
						excelEnrol.setFirstname(rs.getString(2));
						excelEnrol.setLastname(rs.getString(3));
						excelEnrol.setEmail(rs.getString(4).replace(",", "."));
						CourseRole cr = new CourseRole();
						cr.setCourse(rs.getString(5));
						cr.setRole(rs.getString(6));
						excelEnrol.addCourseRole(cr);
						temp = excelEnrol;
						
						
							aList.put(excelEnrol.getUsername(), excelEnrol);
							tempCnt++;
						
					} else {
						
						CourseRole cr = new CourseRole();
						cr.setCourse(rs.getString(5));
						cr.setRole(rs.getString(6));
						temp.addCourseRole(cr);
						aList.replace(temp.getUsername(), temp);
						tempCnt++;
					}
			  }
			//}
		} catch (Exception ex) {
			String msg = ex.getMessage();
			System.out.println(msg);
		}
		
		return aList;
	}
	public boolean existInEthinkUser(String id) {
		
		String sqlstmt = "SELECT * FROM ETHINK_USERS WHERE USERNAME = ?";
        boolean found = false;
		try {
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setString(1, id);

			ResultSet rs = prepStmt.executeQuery();
			if (rs.next()){
				found = true;
			}
			

			rs.close();
			prepStmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return found;
	}
	
	/**eThink Functionality**/
	public HashMap<String,String> getEthinkUsers(HashMap<String,String> hashThink){
		int count = 0;
		String sqlstmt = "SELECT USERNAME FROM ETHINK_USERS";
        boolean found = false;
		try {
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			
			ResultSet rs = prepStmt.executeQuery();
		  while (rs.next()){
				hashThink.put(rs.getString(1), rs.getString(1));
				count++;
			}
			
            System.out.println("ethnk "+ count);
			rs.close();
			prepStmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hashThink;
	}
	public void insertIntoEthinkUsers(String id,String firstname,String lastname, String email) {
		String sqlstmt = "";
		
			sqlstmt = "INSERT INTO SVC_ETHINK.ETHINK_USERS (IDNUMBER, USERNAME, FIRSTNAME, LASTNAME, EMAIL) "
					+ "VALUES (?, ?, ?, ?, ?)";

		
	
		try {
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);

				prepStmt.setString(1, id);
				prepStmt.setString(2,  id);
				prepStmt.setString(3, firstname);
				prepStmt.setString(4, lastname);
				prepStmt.setString(5, email);
				
			
			prepStmt.executeUpdate();
			prepStmt.close();

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	/**eThink Functionality**/
	
	public HashMap<String, ExcelEnrol> ethinkEnrollment(String semester) throws FileNotFoundException{
		
		MessageLogger.setErr(new PrintStream(new FileOutputStream(new File("C:\\temp\\upload\\logs\\enrollment.log"))));
	   	MessageLogger.setOut(new PrintStream(new FileOutputStream(new File("C:\\temp\\upload\\logs\\enrollment.log"))));
	   	
	   	MessageLogger.out.println("Semester Course Enrollments begin....");
		HashMap<String, ExcelEnrol>  aList = new HashMap<String, ExcelEnrol> ();
		PreparedStatement prepStmt = null;
		hdrCnt=0;
		tempCnt =0;
		try {
//			HashMap<String,Resits> resitList = ExcelCourse.usingDataInputStreamResits();
			//eThinkEnrollmentsQRY()
			//gatherlecturerEnrollmentExamsQuery()
			
			
			prepStmt = conn.prepareStatement(eThinkEnrollmentsQRY());
			prepStmt.setString(1, semester);
			ResultSet rs = prepStmt.executeQuery();
			ExcelEnrol temp = new ExcelEnrol();
				
			while (rs.next()) {

				//String course_code = rs.getString("COURSE_CODE");
				//if (resitList.containsKey(course_code)) {
					if (!aList.containsKey(rs.getString(1))) {

						if (tempCnt > hdrCnt) {
							hdrCnt = tempCnt;
						}
						tempCnt = 0;

						ExcelEnrol excelEnrol = new ExcelEnrol();
						excelEnrol.setUsername(rs.getString(1));
						excelEnrol.setFirstname(rs.getString(2));
						excelEnrol.setLastname(rs.getString(3));
						excelEnrol.setEmail(rs.getString(4).replace(",", "."));
						CourseRole cr = new CourseRole();
						cr.setCourse(rs.getString(5));
						cr.setRole(rs.getString(6));
						excelEnrol.addCourseRole(cr);
						temp = excelEnrol;
						
						
							aList.put(excelEnrol.getUsername(), excelEnrol);
							tempCnt++;
						
					} else {
						
						CourseRole cr = new CourseRole();
						cr.setCourse(rs.getString(5));
						cr.setRole(rs.getString(6));
						temp.addCourseRole(cr);
						aList.replace(temp.getUsername(), temp);
						tempCnt++;
					}
			  }
			//}
		} catch (Exception ex) {
			String msg = ex.getMessage();
			System.out.println(msg);
		}
		
		
		MessageLogger.out.println("Semeste.r Course Enrollments end....");
		return aList;
	}
	public HashMap<String, ExcelEnrol> ethinkProficencyTest(){
		
		UIBEnrol e = new UIBEnrol();
		HashMap<String, ExcelEnrol>  aList = new HashMap<String, ExcelEnrol> ();
		
		ArrayList<StudentEnrol> stuEnrol = e.generateEnrolShell();
		Iterator<StudentEnrol> ii= stuEnrol.iterator();
		while (ii.hasNext()) {
			
			if (tempCnt > hdrCnt) {
				hdrCnt = tempCnt;
			}
			tempCnt=0;
			
			StudentEnrol stu = ii.next();
			ExcelEnrol excelEnrol = new ExcelEnrol();
			excelEnrol.setUsername(stu.getId());
			excelEnrol.setFirstname(stu.getId());
			excelEnrol.setLastname(stu.getId());
			excelEnrol.setEmail(stu.getEmail());
		
			CourseRole cr = new CourseRole();
			cr.setCourse("ELPT2021-L01 - 202020");
			cr.setRole("student");
			excelEnrol.addCourseRole(cr);
			
			aList.put(excelEnrol.getUsername(), excelEnrol);
			tempCnt++;
		}
		return aList;
	}
	public int getHdrCnt() {
		return hdrCnt;
	}
	public ArrayList<StudentEnrol> gatherEnrollments() {

		ArrayList<StudentEnrol> aList = new ArrayList<StudentEnrol>();
		PreparedStatement prepStmt = null;
		MoodleObjects mo = (MoodleObjects) hmap.get("enrol");
		//MoodleObjects mo = new MoodleObjects();
		//mo.setOverride(true);
		try {
			if (!upload) {
				//gatherEnrollmentsQuery()
				
				prepStmt = conn.prepareStatement(gatherExamShellsQuery());

			} else if (upload) {
				prepStmt = conn
						.prepareStatement(gatherEnrollmentbyCourseQuery());
			}

						
			prepStmt.setString(1, "L");
			prepStmt.setString(2, "R");

			
				prepStmt.setString(3, "P");
				prepStmt.setString(4, "W");
				prepStmt.setString(5, "K");
			

			if (!mo.getOverride()) {
				//prepStmt.setString(6, getCurrentTerm());
				prepStmt.setString(6, getCurrentTerm());
			} else {
				prepStmt.setString(6, mo.getSemester());
				//prepStmt.setString(1, mo.getSemester());
			}
			
			if (upload) {
				prepStmt.setString(7, crseCode);
				prepStmt.setString(8, crseNumb);
				prepStmt.setString(9, seqNumb);
			}

			ResultSet rs = prepStmt.executeQuery();

			while (rs.next()) {
				StudentEnrol stuEnrol = new StudentEnrol();
				stuEnrol.setTermCode(rs.getString(1));
				stuEnrol.setSubjCode(rs.getString(5));
				stuEnrol.setCrseCode(rs.getString(6));
				stuEnrol.setId(rs.getString(7));
				
				stuEnrol.setCrn(rs.getString(14));
				stuEnrol.setSeqNumb(rs.getString(11));
				stuEnrol.setUserType("student");

				stuEnrol.setAction("add");

				if (mo.getOverride()) {
					if (rs.getString(4).equals("UG"))
						stuEnrol.setAction(mo.getAction());
				}

				aList.add(stuEnrol);

			}

			rs.close();
			prepStmt.close();
			MessageLogger.out.println("Start...End of gatherEnrollments");

		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return aList;
	}

	public ArrayList gatherLectEnrollments() {
		ArrayList aList = new ArrayList();
		PreparedStatement prepStmt = null;
		MoodleObjects mo = (MoodleObjects) hmap.get("enrol");

		try {
			// prepStmt = conn.prepareStatement(gatherLectEnrollmentsQuery());
			//gatherlecturerEnrollmentExamsQuery()

			if (!this.upload) {
				//gatherLecturerEnrollmentsQuery()
				prepStmt = conn
						.prepareStatement(gatherlecturerEnrollmentExamsQuery());
				
				
			} else if (this.upload) {
				prepStmt = conn
						.prepareStatement(gatherLecturerSpecificEnrollmentQuery());
			}
			if (!mo.getOverride()) {
				prepStmt.setString(1, getCurrentTerm());
			} else if (mo.getOverride()) {
				prepStmt.setString(1, mo.getSemester());
			}
			prepStmt.setString(1, "201920");
			
			if (this.upload) {
				prepStmt.setString(2, this.crseCode);
				prepStmt.setString(3, this.crseNumb);
				prepStmt.setString(4, this.seqNumb);
			}

			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {
				String id = rs.getString(ID);
				if (id != null) {

					StudentEnrol stuEnrol = new StudentEnrol();
					stuEnrol.setTermCode(rs.getString(TERM));
					stuEnrol.setSubjCode(rs.getString(SUBJ));
					stuEnrol.setCrseCode(rs.getString(CRSE));
					
					stuEnrol.setId(rs.getString(ID));
					stuEnrol.setSeqNumb(rs.getString(SEQNO));
					//stuEnrol.setSeqNumb("F01");
					
					String str = rs.getString(PRIMARY_IND);
			        
					if (rs.getString(PRIMARY_IND) != null){
						if (rs.getString(PRIMARY_IND).equals("Y")){
							stuEnrol.setUserType("lecturer");	
						} else {
							stuEnrol.setUserType("tutor");
						}
					}
					  
					else{
					  stuEnrol.setUserType("tutor");
					}
					stuEnrol.setAction("add");

					stuEnrol.setCrn(rs.getString(CRN));

					aList.add(stuEnrol);
				}
			}

			rs.close();
			prepStmt.close();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return aList;
	}

	private HashMap crnDropped(String term) {
		HashMap hmap = new HashMap();

		PreparedStatement prepStmt = null;

		try {

			prepStmt = conn.prepareStatement(gatherDroppedCRNs());

			prepStmt.setString(1, "DD");
			prepStmt.setString(2, "DW");
			prepStmt.setString(3, "VW");
			prepStmt.setString(4, "WC");
			prepStmt.setString(5, "WD");
			prepStmt.setString(6, "WW");
			prepStmt.setString(7, "DC");

			prepStmt.setString(8, getCurrentTerm());

			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				Dropped drp = new Dropped();
				drp.setTermCode(rs.getString(1));
				drp.setCrn(rs.getString(3));
				drp.setDropped(true);
				drp.setId(rs.getString(6));

				hmap.put(rs.getString(6) + "_" + rs.getString(3), drp);

			}
			rs.close();
			prepStmt.close();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}

		return hmap;
	}

	public ArrayList gatherEnrollmentsByCourse(String subjCode, String crseNumb) {
		ArrayList aList = new ArrayList();
		PreparedStatement prepStmt = null;

		try {
			prepStmt = conn.prepareStatement(gatherEnrollmentsByCourseQuery());
			prepStmt.setString(1, getCurrentTerm());
			prepStmt.setString(2, subjCode);
			prepStmt.setString(3, crseNumb);
			prepStmt.setString(4, "L");

			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {
				StudentEnrol stuEnrol = new StudentEnrol();
				stuEnrol.setTermCode(rs.getString(1));
				stuEnrol.setSubjCode(rs.getString(9));
				stuEnrol.setCrseCode(rs.getString(10));
				stuEnrol.setId(rs.getString(2));
				stuEnrol.setSeqNumb(rs.getString(12));
				if (rs.getString(13).equals("DD")
						|| rs.getString(13).equals("DW")) {
					stuEnrol.setAction("drop");
				} else {
					stuEnrol.setAction("add");
				}
				aList.add(stuEnrol);
			}

			rs.close();
			prepStmt.close();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return aList;
	}

    public ArrayList suspendUser(){
	
    	 return null;
	}
	public ArrayList<UserEnrol> gatherStudentUsers() {
		ArrayList<UserEnrol> aList = new ArrayList<UserEnrol>();
		PreparedStatement prepStmt = null;
		exportDb = new SpecialCharsDb(
				"jdbc:mysql://owl2:3305/exportexcel", "admin", "kentish");
		charList = exportDb.listSpecialCharacters();
		DocumentBuilder builder = null;

		try {

		
            
			prepStmt = conn.prepareStatement(gatherStudentUserQuery());
			MoodleObjects mobj = (MoodleObjects) hmap.get("user");
			
			String[] range = termRange(getCurrentTerm());
			
			if (!mobj.getOverride()){
			    prepStmt.setString(1,range[0]);
			    prepStmt.setString(2,range[1]);
			    prepStmt.setString(3,getCurrentTerm());
			}
			else{
			
				String[] rang = termRange(mobj.getSemester());
				prepStmt.setString(1,"201930"); //rang[0]
			    prepStmt.setString(2,"201930"); //rang[1]
			    prepStmt.setString(3,(mobj.getSemester()));
			
			}
			prepStmt.setString(4, "CA");
			
           
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				
				UserEnrol userEnrol = new UserEnrol();
				userEnrol.setId(rs.getString(1));
				
				
				userEnrol
						.setLastName(replaceSpecialCharacters(rs.getString(2)));
				String fname = rs.getString(3);
				userEnrol.setFirstName(replaceSpecialCharacters(fname));
				userEnrol.setEmail(rs.getString(4));
				userEnrol.setCountry(rs.getString(5));
				userEnrol.setCity(rs.getString(6));
				
				String fiveornot = userEnrol.getId().substring(0, 1);
				
				userEnrol.setAuth("ldap");
				
				userEnrol.setPassword("");
				
				
				if (rs.getString(8) != null) {
					if (rs.getString(8).equals("AS")
							|| rs.getString(8).equals("EX")) {
					//if (r.equals("ox")) { 
												
						userEnrol.setAction(action);
						userEnrol.setSuspend(0);
						if (action.equals("create")){
							userEnrol.setSuspend(0);
						} else if (action.equals("update")){
							
							if (rs.getString(1) == "417001746"){
								System.out.println();
							}
							if (OnHold(rs.getString(1))){
								    userEnrol.setSuspend(0);	
							} else {
								userEnrol.setSuspend(0);
							}
						}
						
					} else {
						userEnrol.setAction("delete");
					}
				}
				aList.add(userEnrol);
			}

			rs.close();
			prepStmt.close();
			exportDb.closeConnections();

		} catch (SQLException ex) {
			ex.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return aList;
	}

	public ArrayList gatherCALecturerUsers() {
		ArrayList<UserEnrol> aList = new ArrayList<UserEnrol>();
		PreparedStatement prepStmt = null;
		exportDb = new SpecialCharsDb(
				"jdbc:mysql://localhost:3305/exportexcel", "admin", "kentish");
		charList = exportDb.listSpecialCharacters();

		try {
			prepStmt = conn.prepareStatement(gatherLecturerCAUserQuery());
			MoodleObjects mobj = (MoodleObjects) hmap.get("user");
			String term =  "";
			
			if (!mobj.getOverride()){
			   
			    term = getCurrentTerm();
			    
			} else {
			
				term = mobj.getSemester();
				
			}
			
			prepStmt.setString(1,term);
			prepStmt.setString(2, "L");
			prepStmt.setString(3, "R");
			prepStmt.setString(4, "P");
			prepStmt.setString(5, "W");
			prepStmt.setString(6, "K");
			prepStmt.setString(7, "T");
			
		
			
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				UserEnrol userEnrol = new UserEnrol();
				userEnrol.setId(rs.getString(3));
				userEnrol.setLastName(replaceSpecialCharacters(rs.getString(4))
						.replaceAll(" ", ""));
				String fname = rs.getString(5);
				userEnrol.setEmail(rs.getString(6));
				userEnrol.setFirstName(replaceSpecialCharacters(fname));
				
				userEnrol.setCountry("Barbados");
				userEnrol.setCity("Bridgetown");
			
				
				String str  = rs.getString(3).substring(0, 4);
				
				if (rs.getString(3).substring(0, 4) .equals( "2000")) {
					userEnrol.setAuth("ldap");
					userEnrol.setPassword("");
				} else {
					userEnrol.setAuth("ldap");
					userEnrol.setPassword("");
				}
				
				

				userEnrol.setAction("create");

				aList.add(userEnrol);
			}

			rs.close();
			prepStmt.close();
			exportDb.closeConnections();

		} catch (SQLException ex) {
			ex.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return aList;
	}
	public ArrayList<UserEnrol> gatherNOTCALecturerUsers(ArrayList aList) {
		
		PreparedStatement prepStmt = null;
		exportDb = new SpecialCharsDb(
				"jdbc:mysql://localhost:3305/exportexcel", "admin", "kentish");
		charList = exportDb.listSpecialCharacters();

		try {
			prepStmt = conn.prepareStatement(gatherLecturerNOTCAUserQuery());
			MoodleObjects mobj = (MoodleObjects) hmap.get("user");
			String term =  "";
			
			if (!mobj.getOverride()){
			   
			    term = getCurrentTerm();
			    
			} else {
			
				term = mobj.getSemester();
				
			}
			
			prepStmt.setString(1,term);
//			prepStmt.setString(2, "L");
//			prepStmt.setString(3, "R");
//			prepStmt.setString(4, "P");
//			prepStmt.setString(5, "W");
//			prepStmt.setString(6, "K");

			
		
			
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				UserEnrol userEnrol = new UserEnrol();
				userEnrol.setId(rs.getString(3));
				userEnrol.setLastName(replaceSpecialCharacters(rs.getString(4))
						.replaceAll(" ", ""));
				String fname = rs.getString(5);
				userEnrol.setEmail(rs.getString(6));
				userEnrol.setFirstName(replaceSpecialCharacters(fname));
				
				userEnrol.setCountry("Barbados");
				userEnrol.setCity("Bridgetown");
			
				
				String str  = rs.getString(3).substring(0, 4);
				
				if (rs.getString(3).substring(0, 4) .equals( "2000")) {
					userEnrol.setAuth("ldap");
					userEnrol.setPassword("");
				} else {
					userEnrol.setAuth("ldap");
					userEnrol.setPassword("");
				}
				
				

				userEnrol.setAction("create");

				aList.add(userEnrol);
			}

			rs.close();
			prepStmt.close();
			exportDb.closeConnections();

		} catch (SQLException ex) {
			ex.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return aList;
	}
	private boolean findStudentOnHold(String id) {
		boolean found = false;

		MySQLConnection mysql = new MySQLConnection();

		return found;
	}

	private String replaceSpecialCharacters(String s) {

		Iterator ii = charList.iterator();

		while (ii.hasNext()) {

			SpecialCharacters sc = (SpecialCharacters) ii.next();
			if (s.indexOf(sc.getSpecialCharacter()) >= 0) {
				s = s.replaceAll(sc.getSpecialCharacter(),
						sc.getAlphaCharacter());
			}
		}

		return s;
	}

	public String getLevel(String code) {
		String level = "";

		String sqlstmt = "SELECT STVLEVL_DESC FROM STVLEVL WHERE STVLEVL_CODE = ?";

		try {
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setString(1, code);

			ResultSet rs = prepStmt.executeQuery();
			rs.next();
			level = rs.getString(1);

			rs.close();
			prepStmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return level;

	}

	public String getStudentPassword(String id) {
		String password = null;

		String sqlstmt = "SELECT SPRIDEN.SPRIDEN_FIRST_NAME, SPRIDEN.SPRIDEN_LAST_NAME, SPBPERS.SPBPERS_BIRTH_DATE, "
				+ "SGBSTDN.SGBSTDN_TERM_CODE_EFF, SPRIDEN.SPRIDEN_ID FROM SGBSTDN INNER JOIN (SPBPERS INNER JOIN SPRIDEN "
				+ "ON SPBPERS.SPBPERS_PIDM = SPRIDEN.SPRIDEN_PIDM) ON SGBSTDN.SGBSTDN_PIDM = SPBPERS.SPBPERS_PIDM "
				+ "WHERE (((SPRIDEN.SPRIDEN_CHANGE_IND) Is Null) AND ((SGBSTDN.SGBSTDN_TERM_CODE_EFF)=?) AND ((SPRIDEN.SPRIDEN_ID)=?))";

		DateFormatter df = new DateFormatter();

		try {
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			System.out.println(getCurrentTerm());
			prepStmt.setString(1, getCurrentTerm());
			prepStmt.setString(2, id);

			ResultSet rs = prepStmt.executeQuery();

			while (rs.next()) {
				BannerStudentInfo bsi = new BannerStudentInfo();
				bsi.setFirstname(rs.getString(1));
				bsi.setLastname(rs.getString(2));
				bsi.setBirthDate(rs.getDate(3));
				System.out.println(bsi.getCalculatedPwd());
				password = bsi.getCalculatedPwd();

			}
			prepStmt.close();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return password;
	}

	public boolean foundStudentOnHold(String id) {

		boolean found = false;

		String sqlstmt = "SELECT SPRIDEN.SPRIDEN_ID, SPRIDEN.SPRIDEN_LAST_NAME, SPRIDEN.SPRIDEN_FIRST_NAME, "
				+ "SGBSTDN.SGBSTDN_STST_CODE, SPRHOLD.SPRHOLD_HLDD_CODE, SGBSTDN.SGBSTDN_CAMP_CODE, "
				+ "SGBSTDN.SGBSTDN_COLL_CODE_1, SGBSTDN.SGBSTDN_SITE_CODE, SGBSTDN.SGBSTDN_LEVL_CODE "
				+ "FROM SPRIDEN INNER JOIN (SPRHOLD INNER JOIN SGBSTDN ON SPRHOLD.SPRHOLD_PIDM = "
				+ "SGBSTDN.SGBSTDN_PIDM) ON SPRIDEN.SPRIDEN_PIDM = SGBSTDN.SGBSTDN_PIDM "
				+ "WHERE (((SPRHOLD.SPRHOLD_HLDD_CODE)=?) AND ((SPRHOLD.SPRHOLD_TO_DATE)>= ?) "
				+ "AND ((SGBSTDN.SGBSTDN_TERM_CODE_EFF)= ?) AND ((SPRIDEN.SPRIDEN_ID) = ?) AND "
				+ "((SPRIDEN.SPRIDEN_CHANGE_IND) Is Null))";

		DateFormatter df = new DateFormatter();

		try {
			System.out.println(java.sql.Date.valueOf(df.getSimpleDate()) + " "
					+ getCurrentTerm());

			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);

			prepStmt.setString(1, "BU");
			prepStmt.setDate(2, java.sql.Date.valueOf(df.getSimpleDate()));
			prepStmt.setString(3, getCurrentTerm());
			prepStmt.setString(4, id);

			ResultSet rs = prepStmt.executeQuery();

			MySQLConnection mysql = new MySQLConnection();
			while (rs.next()) {

				found = true;

			}

			mysql.updateStudentOnHold(id, found);
			prepStmt.close();
			mysql.closeConnection();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return found;
	}

	public String getEmailAddress(String id) {
		String sqlstmt = "select goremal_email_address from goremal where goremal_emal_code = ? "
				+ "and goremal_pidm = ?";

		String address = null;
		try {

			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setString(1, "CA");
			prepStmt.setInt(2, getPidm(id));

			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {

				address = rs.getString(1);
			}
			rs.close();
			prepStmt.close();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return address;
	}

	private int getPidm(String id) {
		String sqlstmt = "select spriden_pidm from spriden where spriden_id = ?";
		int pidm = 0;
		try {

			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setString(1, id);

			ResultSet rs = prepStmt.executeQuery();
			rs.next();

			pidm = rs.getInt(1);
			rs.close();
			prepStmt.close();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return pidm;
	}
	public String[] termRange(String term) {

		String[] range = new String[2];
		range[0] = new String();
		range[1] = new String();

		String year = term.substring(0, 4);

		if (term.substring(4, 6).equals("10")) {
			range[0] = year + "20";
			range[1] = year + "30";
		} else if (term.substring(4, 6).equals("20")) {
			range[0] = year + "10";
			range[1] = year + "30";
		} else if (term.substring(4, 6).equals("30")) {
			range[0] = year + "10";
			range[1] = year + "20";
		}

		if (term.substring(4, 6).equals("30")) {
			int yr = Integer.parseInt(year) + 1;
			range[0] = Integer.toString(yr) + "10";
			System.out.println(range[0]);
		}
		return range;
	}
	public String getCurrentTerm() {
		String term = null;
		MySQLConnection connect = new MySQLConnection();
		 
		
		String sqlstmt = "select max(stvterm_code) as maxtermcode from stvterm where stvterm_start_date <= ? and stvterm_end_date >= ? and stvterm_code <> '201905'";
		DateFormatter df = new DateFormatter();

		try {

			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setDate(1, java.sql.Date.valueOf((df.getSimpleDate())));
			prepStmt.setDate(2, java.sql.Date.valueOf(df.getSimpleDate()));

			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {
				term = rs.getString(1);
			}
			if ((term != null) && (term.indexOf("40") >= 0)) {

				term = null;

			}
			if (term == null) {
				sqlstmt = "select min(stvterm_code) as maxtermcode from stvterm where stvterm_start_date >= ? and stvterm_code <> '201905'";
				df = new DateFormatter();
				prepStmt = conn.prepareStatement(sqlstmt);
				prepStmt.setDate(1, java.sql.Date.valueOf((df.getSimpleDate())));

				rs = prepStmt.executeQuery();
				while (rs.next()) {
					term = rs.getString(1);
				}
			}

			rs.close();
			prepStmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return term;
	}

	public void closeConnection() {
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public String getTermDesc(String termCode) {

		String sqlstmt = "select stvterm_code, stvterm_desc from stvterm where stvterm.stvterm_code = ?";
		String termDesc = null;
		try {
			
			
			PreparedStatement prepStmt = conn.prepareStatement(sqlstmt);
			prepStmt.setString(1, termCode);
			ResultSet rs = prepStmt.executeQuery();
			while (rs.next()) {
				termDesc = rs.getString(2);
			}
           rs.close();
           prepStmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return termDesc;
	}

	public static void main(String[] args) throws SQLException, IOException {
		OracleDBConnect db = new OracleDBConnect();
		//db.connectPostgres();
//		HashMap<String, ExcelEnrol> hashmap = db.ethinkEnrollment(args[0]);
//		HashMap<String, ExcelEnrol> hashmap = db.ethinkEnrollment("202030");
		HashMap<String, ExcelEnrol> hashmap = db.nonAcademicEnrollment();
//		HashMap<String, ExcelEnrol> hashmap = db.ethinkProficencyTest();
		System.out.println(db.getHdrCnt());
		
		ExcelEnrol.usingDataOutputStream(db.getHdrCnt(), hashmap);
		
		
		//MySQLConnection connect = new MySQLConnection();
    	//connect.connectMoodleDb();
    	//HashMap hmap = connect.returnMoodleObjects();
        //db.setMoodleObjects(hmap);
       // db.gatherMetaCourse();
	  //db.gatherLecturerUsers();
		//db.gatherEnrollments();
		//db.dropEnrollments();
        //db.gatherLecturerForDrop("10030558");
		//db.dropLecturerEnrollments();
        //db.setCrseCode("PDLL");
		//db.setCrseNumb("114");
        //db.setUpload(true);
		//db.gatherCourse();
		
		//System.out.println(db.getCurrentTerm());
		//db.dropEnrollments();
		//db.gatherCourse();
		System.exit(0);
		//

		// System.out.println(db.getCurrentTerm());

		// db.getStudentPassword("98608021");
		// db.gatherStudentsOnHold();
		// if (!db.studentOnHold("98608021")){
		// System.out.println("Print not on hold");
		// }
		// UserDb userdb = new UserDb();
		// if (!userdb.alreadyLoaded("98608021")){

		// System.out.println("not loaded");
		// }
		// 98610818 408003678 407001871

		// if (db.foundStudentOnHold("19856010")){
		// System.out.println("found");
		// }
		// if (db.foundStudentOnHold("19916189")){
		// System.out.println("found");
		// }
		// if (db.foundStudentOnHold("20041511")){
		// System.out.println("found");
		// }
		// if (db.foundStudentOnHold("97601514")){
		// System.out.println("found");
		// }

	}

}
